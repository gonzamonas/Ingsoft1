

----QUIT----(26 October 2022 08:07:27) CuisUniversity-5510.image priorSource: 2900072!

----STARTUP---- (26 October 2022 08:07:28) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5510.image!


----QUIT----(26 October 2022 08:07:28) CuisUniversity-5510.image priorSource: 7154921!

----STARTUP---- (3 November 2022 18:56:23) as /Users/main/dev/it3/CuisUniversity-5510.image!


----End fileIn of /Users/main/dev/it3/TusLibros-33.st----!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MA 11/3/2022 19:02:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MA 11/3/2022 19:02:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MA 11/3/2022 19:02:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MA 11/3/2022 19:02:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MA 11/3/2022 19:02:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MA 11/3/2022 19:02:01'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MA 11/3/2022 19:02:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MA 11/3/2022 19:02:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MA 11/3/2022 19:02:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MA 11/3/2022 19:02:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MA 11/3/2022 19:02:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MA 11/3/2022 19:02:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MA 11/3/2022 19:02:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MA 11/3/2022 19:02:05'!
PASSED!

TestCase subclass: #FacadeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FacadeTest category: 'TusLibros' stamp: 'MA 11/3/2022 19:23:16'!
TestCase subclass: #FacadeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/3/2022 19:28:17'!
Object subclass: #Facade
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTest methodsFor: 'no messages' stamp: 'MA 11/3/2022 19:35:44'!
test01

	| facade |
	facade := Facade new.
	self should: [facade createCartWithUser: 'user' password: 'invalidPassword'] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error |
			self assert: Facade invalidCredentialsErrorMessage equals: error messageText.
		]
		 ! !

!testRun: #FacadeTest #test01 stamp: 'MA 11/3/2022 19:35:48'!
ERROR!
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 19:36:26'!
createCartWithUser: aString password: aString2 
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/3/2022 19:38:51' prior: 50555870!
test01

	| facade |
	facade := Facade new.
	self should: [facade createCartWithUser: 'user' password: 'invalidPassword'] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorMessage
		 ! !
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 19:40:05' prior: 50555884!
createCartWithUser: anUser password: aPassword 
	self error: self invalidCredentialsErrorMessage! !
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 19:40:07' prior: 50555900!
createCartWithUser: anUser password: aPassword 
	
	self error: self invalidCredentialsErrorMessage! !

!testRun: #FacadeTest #test01 stamp: 'MA 11/3/2022 19:40:11'!
ERROR!
!Facade class methodsFor: 'error messages' stamp: 'MA 11/3/2022 19:40:22'!
invalidCredentialsErrorMessage
	self shouldBeImplemented.! !
!Facade class methodsFor: 'error messages' stamp: 'MA 11/3/2022 19:40:33' prior: 50555914!
invalidCredentialsErrorMessage
	
	^'Invalid credentials'.! !

!testRun: #FacadeTest #test01 stamp: 'MA 11/3/2022 19:40:34'!
ERROR!
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 19:41:11' prior: 50555906!
createCartWithUser: anUser password: aPassword 
	
	self error: self class invalidCredentialsErrorMessage! !

!testRun: #FacadeTest #test01 stamp: 'MA 11/3/2022 19:41:33'!
PASSED!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/3/2022 19:44:06'!
test02
	| facade cartId |
	
	facade := Facade new.
	cartId := facade createCartWithUser: 'user' password: 'validPassword'.
	self assert: Bag new equals: (facade listCart: cartId).
		 ! !

!testRun: #FacadeTest #test02 stamp: 'MA 11/3/2022 19:44:11'!
ERROR!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/3/2022 19:46:08' prior: 50555935!
test02
	| facade cartId |
	
	facade := Facade new.
	cartId := facade createCartWithUser: 'user' password: 'validPassword'.
	self assert: Bag new equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/3/2022 19:49:20' prior: 50555946!
test02
	
	| facade cartId |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: 'user' password: 'validPassword'.
	self assert: Bag new equals: (facade listCart: cartId).
		 ! !

!testRun: #FacadeTest #test02 stamp: 'MA 11/3/2022 19:51:49'!
ERROR!
!Facade class methodsFor: 'instance creation' stamp: 'MA 11/3/2022 19:51:57'!
newWithValidator: aFacadeTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNewWithValidator: aFacadeTest ! !
!Facade class methodsFor: 'instance creation' stamp: 'MA 11/3/2022 19:52:29' prior: 50555967!
newWithValidator: aCredentialValidator 
	
	^self new initializeNewWithValidator: aCredentialValidator ! !

!testRun: #FacadeTest #test02 stamp: 'MA 11/3/2022 19:52:31'!
ERROR!

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/3/2022 19:52:38'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 19:52:38'!
initializeNewWithValidator: aCredentialValidator 
	self shouldBeImplemented.
	credentialValidator := aCredentialValidator.! !
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 19:52:43' prior: 50555991!
initializeNewWithValidator: aCredentialValidator 

	credentialValidator := aCredentialValidator.! !

!testRun: #FacadeTest #test02 stamp: 'MA 11/3/2022 19:52:46'!
ERROR!
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 19:54:05' prior: 50555926!
createCartWithUser: anUser password: aPassword 
	
	credentialValidator isValidUser: anUser withPassword: aPassword ifFalse: [self error: self class invalidCredentialsErrorMessage]
	self error: self class invalidCredentialsErrorMessage! !
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 19:54:17' prior: 50556006!
createCartWithUser: anUser password: aPassword 
	
	credentialValidator isValidUser: anUser withPassword: aPassword ifFalse: [self error: self class invalidCredentialsErrorMessage]! !

!testRun: #FacadeTest #test01 stamp: 'MA 11/3/2022 19:54:18'!
ERROR!

!testRun: #FacadeTest #test02 stamp: 'MA 11/3/2022 19:54:18'!
ERROR!
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 19:54:55' prior: 50556017!
createCartWithUser: anUser password: aPassword 
	
	credentialValidator isValidUser: anUser withPassword: aPassword ifFalse: [self error: self class invalidCredentialsErrorMessage]
	^'1'! !
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 19:55:01' prior: 50556030!
createCartWithUser: anUser password: aPassword 
	
	credentialValidator isValidUser: anUser withPassword: aPassword ifFalse: [self error: self class invalidCredentialsErrorMessage].
	^'1'! !

!testRun: #FacadeTest #test01 stamp: 'MA 11/3/2022 19:55:38'!
ERROR!

!testRun: #FacadeTest #test02 stamp: 'MA 11/3/2022 19:55:38'!
ERROR!

!testRun: #FacadeTest #test02 stamp: 'MA 11/3/2022 19:55:42'!
ERROR!
!FacadeTest methodsFor: 'credential validation double' stamp: 'MA 11/3/2022 19:56:05'!
isValidUser: anUser withPassword: aPassword ifFalse: aString 
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'credential validation double' stamp: 'MA 11/3/2022 19:57:20' prior: 50556055!
isValidUser: anUser withPassword: aPassword ifFalse: aString 
	
	^anUser = self validUser and: [aPassword = self validPassword].! !

!testRun: #FacadeTest #test02 stamp: 'MA 11/3/2022 19:57:22'!
ERROR!
!FacadeTest methodsFor: 'credential validation double' stamp: 'MA 11/3/2022 19:57:28'!
validUser
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'credential validation double' stamp: 'MA 11/3/2022 19:57:33' prior: 50556072!
validUser
	^'user'! !

!testRun: #FacadeTest #test02 stamp: 'MA 11/3/2022 19:57:34'!
ERROR!
!FacadeTest methodsFor: 'credential validation double' stamp: 'MA 11/3/2022 19:57:41'!
validPassword
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'credential validation double' stamp: 'MA 11/3/2022 19:57:48' prior: 50556083!
validPassword
	^'validPassword'! !

!testRun: #FacadeTest #test02 stamp: 'MA 11/3/2022 19:57:49'!
ERROR!
!Facade methodsFor: 'list' stamp: 'MA 11/3/2022 19:58:05'!
listCart: cartId 
	self shouldBeImplemented.! !

!testRun: #FacadeTest #test02 stamp: 'MA 11/3/2022 19:58:28'!
ERROR!
!Facade methodsFor: 'list' stamp: 'MA 11/3/2022 19:58:44' prior: 50556094!
listCart: cartId 
	Bag new.! !

!testRun: #FacadeTest #test02 stamp: 'MA 11/3/2022 19:58:46'!
FAILURE!
!Facade methodsFor: 'list' stamp: 'MA 11/3/2022 19:59:03' prior: 50556101!
listCart: cartId 
	
	^Bag new.! !

!testRun: #FacadeTest #test02 stamp: 'MA 11/3/2022 19:59:05'!
PASSED!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/3/2022 19:59:32' prior: 50555955!
test02
	
	| facade cartId |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	self assert: Bag new equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:00:00' prior: 50555890!
test01

	| facade |
	facade := Facade new.
	self should: [facade createCartWithUser: self validUser password: self invalidPassword] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorMessage
		 ! !

!testRun: #FacadeTest #test01 stamp: 'MA 11/3/2022 20:00:02'!
ERROR!
!FacadeTest methodsFor: 'credential validation double' stamp: 'MA 11/3/2022 20:00:07'!
invalidPassword
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'credential validation double' stamp: 'MA 11/3/2022 20:00:18' prior: 50556137!
invalidPassword
	^'invalidPassword'.! !

!testRun: #FacadeTest #test01 stamp: 'MA 11/3/2022 20:00:19'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:00:43' prior: 50556124!
test01

	| facade |
	facade := Facade newWithValidator: self.
	self should: [facade createCartWithUser: self validUser password: self invalidPassword] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorMessage
		 ! !

!testRun: #FacadeTest #test01 stamp: 'MA 11/3/2022 20:00:45'!
FAILURE!

!testRun: #FacadeTest #test02 stamp: 'MA 11/3/2022 20:01:01'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'MA 11/3/2022 20:01:06'!
FAILURE!

!testRun: #FacadeTest #test01 stamp: 'MA 11/3/2022 20:01:06'!
FAILURE!

!testRun: #FacadeTest #test01 stamp: 'MA 11/3/2022 20:01:29'!
FAILURE!

!testRun: #FacadeTest #test01 stamp: 'MA 11/3/2022 20:01:29'!
FAILURE!

credentialValidator isValidUser: anUser withPassword: aPassword!
!FacadeTest methodsFor: 'credential validation double' stamp: 'MA 11/3/2022 20:02:21'!
isValidUser: anUser withPassword: aPassword
	
	^anUser = self validUser and: [aPassword = self validPassword].! !

!methodRemoval: FacadeTest #isValidUser:withPassword:ifFalse: stamp: 'MA 11/3/2022 20:02:30'!
isValidUser: anUser withPassword: aPassword ifFalse: aString 
	
	^anUser = self validUser and: [aPassword = self validPassword].!
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 20:02:47' prior: 50556039!
createCartWithUser: anUser password: aPassword 
	
	(credentialValidator isValidUser: anUser withPassword: aPassword) ifFalse: [self error: self class invalidCredentialsErrorMessage].
	^'1'! !
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 20:02:53' prior: 50556189!
createCartWithUser: anUser password: aPassword 
	
	(credentialValidator isValidUser: anUser withPassword: aPassword) 
		ifFalse: [self error: self class invalidCredentialsErrorMessage].
	^'1'! !

!testRun: #FacadeTest #test01 stamp: 'MA 11/3/2022 20:02:54'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'MA 11/3/2022 20:02:54'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:03:34'!
test01cannotCreateCartWithInvalidCredentials

	| facade |
	facade := Facade newWithValidator: self.
	self should: [facade createCartWithUser: self validUser password: self invalidPassword] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorMessage
		 ! !

!methodRemoval: FacadeTest #test01 stamp: 'MA 11/3/2022 20:03:34'!
test01

	| facade |
	facade := Facade newWithValidator: self.
	self should: [facade createCartWithUser: self validUser password: self invalidPassword] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorMessage
		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:03:55'!
test02createCartCreatesAnEmptyCart
	
	| facade cartId |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	self assert: Bag new equals: (facade listCart: cartId).
		 ! !

!methodRemoval: FacadeTest #test02 stamp: 'MA 11/3/2022 20:03:55'!
test02
	
	| facade cartId |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	self assert: Bag new equals: (facade listCart: cartId).
		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:06:42'!
test02addToCartReturnsTheAddedItems
	
	| facade cartId |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 ToCart: cartId 
	self assert: Bag new equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:07:10'!
test03addToCartReturnsTheAddedItems
	
	| facade cartId |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 ToCart: cartId 
	self assert: Bag new equals: (facade listCart: cartId).
		 ! !

!methodRemoval: FacadeTest #test02addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:07:10'!
test02addToCartReturnsTheAddedItems
	
	| facade cartId |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 ToCart: cartId 
	self assert: Bag new equals: (facade listCart: cartId).
		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:07:55' prior: 50556263!
test03addToCartReturnsTheAddedItems
	
	| facade cartId |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 of: 'item' ToCart: cartId. 
	self assert: Bag with: 'item' with: 'item' equals: (facade listCart: cartId).
		 ! !

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'MA 11/3/2022 20:08:45'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'MA 11/3/2022 20:08:44'!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !

!methodRemoval: StoreTestObjectsFactory #setUp stamp: 'MA 11/3/2022 20:09:00'!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.!

!classDefinition: #FacadeTest category: 'TusLibros' stamp: 'MA 11/3/2022 20:09:10'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTest methodsFor: 'nil' stamp: 'MA 11/3/2022 20:09:08' overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !

Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'MA 11/3/2022 20:09:14'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:10:10' prior: 50556286!
test03addToCartReturnsTheAddedItems
	
	| facade cartId |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 of: testObjectsFactory itemSellByTheStore cartId. 
	self assert: Bag with: 'item' with: 'item' equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:10:21' prior: 50556341!
test03addToCartReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item cartId. 
	self assert: Bag with: 'item' with: 'item' equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:10:32' prior: 50556354!
test03addToCartReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item cartId. 
	self assert: Bag with: item with: item equals: (facade listCart: cartId).
		 ! !

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:10:35'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:10:47' prior: 50556368!
test03addToCartReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	self assert: Bag with: item with: item equals: (facade listCart: cartId).
		 ! !

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:10:50'!
ERROR!
!Facade methodsFor: 'add' stamp: 'MA 11/3/2022 20:10:58'!
add: aString of: item to: cartId 
	self shouldBeImplemented.! !
!Facade methodsFor: 'add' stamp: 'MA 11/3/2022 20:11:51' prior: 50556402!
add: aQuantity of: anItem to: aCartId! !

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:11:52'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:12:05' prior: 50556385!
test03addToCartReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	self assert: (Bag with: item with: item) equals: (facade listCart: cartId).
		 ! !

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:12:07'!
FAILURE!
!Facade methodsFor: 'add' stamp: 'MA 11/3/2022 20:13:45' prior: 50556407!
add: aQuantity of: anItem to: aCartId

	! !

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:14:33'!
FAILURE!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:14:33'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:14:33'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:14:33'!
FAILURE!
!Facade methodsFor: 'add' stamp: 'MA 11/3/2022 20:15:43' prior: 50556431!
add: aQuantity of: anItem to: aCartId

	(Cart acceptingItemsOf: Dictionary new) add: aQuantity of: anItem.! !
!Facade methodsFor: 'add' stamp: 'MA 11/3/2022 20:15:46' prior: 50556448!
add: aQuantity of: anItem to: aCartId

	| cart |
	cart := Cart acceptingItemsOf: Dictionary new.
	(cart) add: aQuantity of: anItem.! !
!CartTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:20:31'!
test09EmptyCartItemsAreEmpty

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:20:46' prior: 50556461!
test09EmptyCartItemsAreEmpty

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	self assert: (cart items occurrencesOf: testObjectsFactory itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:21:19' prior: 50556471!
test09EmptyCartItemsAreEmpty

	| cart |
	
	cart := testObjectsFactory createCart.

	self assert: 0 equals: cart items size! !

!testRun: #CartTest #test09EmptyCartItemsAreEmpty stamp: 'MA 11/3/2022 20:21:21'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'MA 11/3/2022 20:21:56'!
items
	self shouldBeImplemented.
	^items! !
!Cart methodsFor: 'accessing' stamp: 'MA 11/3/2022 20:22:10' prior: 50556490!
items
	
	^ Bag new.! !

!testRun: #CartTest #test09EmptyCartItemsAreEmpty stamp: 'MA 11/3/2022 20:22:12'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MA 11/3/2022 20:22:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MA 11/3/2022 20:22:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MA 11/3/2022 20:22:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MA 11/3/2022 20:22:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MA 11/3/2022 20:22:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MA 11/3/2022 20:22:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MA 11/3/2022 20:22:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MA 11/3/2022 20:22:12'!
PASSED!

!testRun: #CartTest #test09EmptyCartItemsAreEmpty stamp: 'MA 11/3/2022 20:22:12'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:22:48'!
test10CartItemsHasTheAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.

	self assert: 0 equals: cart items size! !
!CartTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:23:45' prior: 50555375!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	self assert: 2 equals: (cart items occurrencesOf: testObjectsFactory itemSellByTheStore)
	self assert! !
!CartTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:23:49' prior: 50556535!
test08CartRemembersTheNumberOfAddedItems

	| cart items |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	items := cart items.
	self assert: 2 equals: (items occurrencesOf: testObjectsFactory itemSellByTheStore)
	self assert! !
!CartTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:24:05' prior: 50556546!
test08CartRemembersTheNumberOfAddedItems

	| cart items |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	items := cart items.
	self assert: 2 equals: (items occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 2 equals items size.! !
!CartTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:24:10' prior: 50556558!
test08CartRemembersTheNumberOfAddedItems

	| cart items |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	items := cart items.
	self assert: 2 equals: (items occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 2 equals: items size.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MA 11/3/2022 20:24:10'!
FAILURE!
!Cart methodsFor: 'accessing' stamp: 'MA 11/3/2022 20:24:21' prior: 50556494!
items
	
	^ items.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MA 11/3/2022 20:24:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MA 11/3/2022 20:24:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MA 11/3/2022 20:24:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MA 11/3/2022 20:24:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MA 11/3/2022 20:24:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MA 11/3/2022 20:24:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MA 11/3/2022 20:24:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MA 11/3/2022 20:24:22'!
PASSED!

!testRun: #CartTest #test09EmptyCartItemsAreEmpty stamp: 'MA 11/3/2022 20:24:22'!
PASSED!

!testRun: #CartTest #test10CartItemsHasTheAddedItems stamp: 'MA 11/3/2022 20:24:22'!
PASSED!
!Facade methodsFor: 'add' stamp: 'MA 11/3/2022 20:25:27' prior: 50556454!
add: aQuantity of: anItem to: aCartId

	| cart |
	cart := Cart acceptingItemsOf: Dictionary new.
	cart add: aQuantity of: anItem.
	^cart items.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:25:29'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:25:29'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:25:29'!
ERROR!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:25:29'!
ERROR!
!Facade methodsFor: 'add' stamp: 'MA 11/3/2022 20:26:23' prior: 50556621!
add: aQuantity of: anItem to: aCartId

	| cart |
	cart := Cart acceptingItemsOf: Dictionary new; at: anItem put: 0.
	cart add: aQuantity of: anItem.
	^cart items.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:30:20'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:30:20'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:30:20'!
ERROR!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:30:20'!
ERROR!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:30:23'!
ERROR!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:30:23'!
ERROR!
!Facade methodsFor: 'add' stamp: 'MA 11/3/2022 20:31:04' prior: 50556641!
add: aQuantity of: anItem to: aCartId

	| cart |
	cart := Cart acceptingItemsOf: (Dictionary new; at: anItem put: 0; yourself).
	cart add: aQuantity of: anItem.
	^cart items.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:31:05'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:31:05'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:31:05'!
ERROR!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:31:05'!
ERROR!
!Facade methodsFor: 'add' stamp: 'MA 11/3/2022 20:31:40' prior: 50556668!
add: aQuantity of: anItem to: aCartId

	| cart |
	cart := Cart acceptingItemsOf: (Dictionary new at: anItem put: 0; yourself).
	cart add: aQuantity of: anItem.
	^cart items.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:31:43'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:31:43'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:31:43'!
FAILURE!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:31:43'!
FAILURE!
!Facade methodsFor: 'add' stamp: 'MA 11/3/2022 20:32:03' prior: 50556689!
add: aQuantity of: anItem to: aCartId

	| cart |
	cart := Cart acceptingItemsOf: (Dictionary new at: anItem put: 1; yoursel1).
	cart add: aQuantity of: anItem.
	^cart items.! !
!Facade methodsFor: 'add' stamp: 'MA 11/3/2022 20:32:10' prior: 50556710!
add: aQuantity of: anItem to: aCartId

	| cart |
	cart := Cart acceptingItemsOf: (Dictionary new at: anItem put: 1*peso; yoursel1).
	cart add: aQuantity of: anItem.
	^cart items.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:32:11'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:32:11'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:32:11'!
ERROR!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:32:11'!
ERROR!
!Facade methodsFor: 'add' stamp: 'MA 11/3/2022 20:32:17' prior: 50556718!
add: aQuantity of: anItem to: aCartId

	| cart |
	cart := Cart acceptingItemsOf: (Dictionary new at: anItem put: 1*peso; yourself).
	cart add: aQuantity of: anItem.
	^cart items.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:32:18'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:32:18'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:32:18'!
FAILURE!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:32:18'!
FAILURE!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:33:36'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:33:36'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:33:36'!
FAILURE!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:33:36'!
FAILURE!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:33:54'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:33:54'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:33:54'!
FAILURE!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:33:54'!
FAILURE!

cart items!
!Facade methodsFor: 'add' stamp: 'MA 11/3/2022 20:34:42' prior: 50556739!
add: aQuantity of: anItem to: aCartId

	| cart |
	cart := Cart acceptingItemsOf: (Dictionary new at: anItem put: 1*peso; yourself).
	cart add: aQuantity of: anItem.! !

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:34:43'!
FAILURE!

Object subclass: #Facade
	instanceVariableNames: 'credentialValidator'
	classVariableNames: 'cart'
	poolDictionaries: ''
	category: 'TusLibros'!

----SNAPSHOT----(3 November 2022 20:37:33) CuisUniversity-5510.image priorSource: 7155150!
!Facade methodsFor: 'add' stamp: 'MA 11/3/2022 20:38:29' prior: 50556786!
add: aQuantity of: anItem to: aCartId

	| cart1 |
	cart1 := Cart acceptingItemsOf: (Dictionary new at: anItem put: 1*peso; yourself).
	cart1 add: aQuantity of: anItem.! !

Object subclass: #Facade
	instanceVariableNames: 'credentialValidator cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/3/2022 20:38:35'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'add' stamp: 'MA 11/3/2022 20:38:44' prior: 50556805!
add: aQuantity of: anItem to: aCartId

	cart := Cart acceptingItemsOf: (Dictionary new at: anItem put: 1*peso; yourself).
	cart add: aQuantity of: anItem.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:38:46'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:38:46'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:38:46'!
FAILURE!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:38:46'!
FAILURE!
!Facade methodsFor: 'list' stamp: 'MA 11/3/2022 20:38:54' prior: 50556107!
listCart: cartId 
	
	^cart items.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:38:55'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:38:55'!
ERROR!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:38:55'!
FAILURE!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:39:04'!
FAILURE!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:39:21'!
FAILURE!

cart items!
!CartTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:40:47' prior: 50556528!
test10CartItemsHasTheAddedItems

	| cart items |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	items := cart items.
	self assert: 2 equals: (items occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 2 equals: items size.! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:11' prior: 50556570!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 2! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MA 11/3/2022 20:41:00'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MA 11/3/2022 20:41:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MA 11/3/2022 20:41:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MA 11/3/2022 20:41:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MA 11/3/2022 20:41:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MA 11/3/2022 20:41:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MA 11/3/2022 20:41:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MA 11/3/2022 20:41:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MA 11/3/2022 20:41:00'!
PASSED!

!testRun: #CartTest #test09EmptyCartItemsAreEmpty stamp: 'MA 11/3/2022 20:41:00'!
PASSED!

!testRun: #CartTest #test10CartItemsHasTheAddedItems stamp: 'MA 11/3/2022 20:41:00'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:41:35' prior: 50556233!
test02createCartCreatesAnEmptyCart
	
	| facade cartId |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	self assert: OrderedCollection new equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:41:43' prior: 50556414!
test03addToCartReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:41:44'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:41:44'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:41:44'!
ERROR!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:41:44'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:41:44'!
ERROR!
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 20:42:22' prior: 50556198!
createCartWithUser: anUser password: aPassword 
	
	(credentialValidator isValidUser: anUser withPassword: aPassword) 
		ifFalse: [self error: self class invalidCredentialsErrorMessage].
	cart := Cart new.
	^'1'! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:42:23'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:42:23'!
FAILURE!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:42:23'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:42:23'!
FAILURE!

cart items!
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 20:43:49' prior: 50556965!
createCartWithUser: anUser password: aPassword 
	
	(credentialValidator isValidUser: anUser withPassword: aPassword) 
		ifFalse: [self error: self class invalidCredentialsErrorMessage].
	cart := Cart acceptingItemsOf: Dictionary new.
	^'1'! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:43:51'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:43:51'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:43:51'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:44:45'!
test04addToCartMultipleTimesReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:45:03' prior: 50557008!
test04addToCartMultipleTimesReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := Facade newWithValidator: self.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 1 of: item to: cartId. 
	facade add: 1 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/3/2022 20:45:06'!
FAILURE!
!Facade methodsFor: 'add' stamp: 'MA 11/3/2022 20:45:49' prior: 50556825!
add: aQuantity of: anItem to: aCartId

	cart add: aQuantity of: anItem.! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:48:04' prior: 50557023!
test04addToCartMultipleTimesReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 1 of: item to: cartId. 
	facade add: 1 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/3/2022 20:48:07'!
ERROR!
!Facade class methodsFor: 'instance creation' stamp: 'MA 11/3/2022 20:48:12'!
newWithValidator: aFacadeTest withPriceList: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNewWithValidator: aFacadeTest withPriceList: aDictionary ! !
!Facade class methodsFor: 'instance creation' stamp: 'MA 11/3/2022 20:48:29' prior: 50557069!
newWithValidator: aFacadeTest withPriceList: aPriceList 

	^self new initializeNewWithValidator: aFacadeTest withPriceList: aPriceList ! !

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/3/2022 20:48:30'!
ERROR!

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/3/2022 20:48:38'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator cart facadeTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/3/2022 20:48:38'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator cart facadeTest priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 20:48:38'!
initializeNewWithValidator: aFacadeTest withPriceList: aPriceList 
	self shouldBeImplemented.
	facadeTest := aFacadeTest.
	priceList := aPriceList.! !
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 20:48:46' prior: 50557106!
initializeNewWithValidator: aFacadeTest withPriceList: aPriceList 

	facadeTest := aFacadeTest.
	priceList := aPriceList.! !
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 20:49:01' prior: 50557114!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList 

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.! !

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/3/2022 20:49:03'!
ERROR!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/3/2022 20:49:20'!
ERROR!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/3/2022 20:50:10'!
ERROR!
!Facade methodsFor: 'create' stamp: 'MA 11/3/2022 20:50:45' prior: 50556988!
createCartWithUser: anUser password: aPassword 
	
	(credentialValidator isValidUser: anUser withPassword: aPassword) 
		ifFalse: [self error: self class invalidCredentialsErrorMessage].
	cart := Cart acceptingItemsOf: priceList.
	^'1'! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:50:48'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:50:48'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:50:48'!
ERROR!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/3/2022 20:50:48'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:50:48'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:51:27' prior: 50556934!
test03addToCartReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:51:31' prior: 50556923!
test02createCartCreatesAnEmptyCart
	
	| facade cartId |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	self assert: OrderedCollection new equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:51:34' prior: 50556211!
test01cannotCreateCartWithInvalidCredentials

	| facade |
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	self should: [facade createCartWithUser: self validUser password: self invalidPassword] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorMessage
		 ! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:51:36'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:51:36'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:51:36'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:51:36'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/3/2022 20:51:36'!
PASSED!

!methodRemoval: Facade #initializeNewWithValidator: stamp: 'MA 11/3/2022 20:51:46'!
initializeNewWithValidator: aCredentialValidator 

	credentialValidator := aCredentialValidator.!

!methodRemoval: Facade class #newWithValidator: stamp: 'MA 11/3/2022 20:51:53'!
newWithValidator: aCredentialValidator 
	
	^self new initializeNewWithValidator: aCredentialValidator !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:52:18'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:52:20'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:52:20'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:52:20'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/3/2022 20:52:20'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:54:30'!
test05createMultipleCarts
	
	| facade item firstCartId secondCartId |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 1 of: item to: firstCartId. 
	
	secondCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: secondCartId).
		 ! !

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/3/2022 20:54:35'!
FAILURE!
!Facade methodsFor: 'create' stamp: 'MA 11/3/2022 20:57:37'!
validateUser: anUser password: aPassword

	^ (credentialValidator isValidUser: anUser withPassword: aPassword) 
		ifFalse: [self error: self class invalidCredentialsErrorMessage]! !
!Facade methodsFor: 'create' stamp: 'MA 11/3/2022 20:57:37' prior: 50557139!
createCartWithUser: anUser password: aPassword 
	
	self validateUser: anUser password: aPassword.
	cart := Cart acceptingItemsOf: priceList.
	^'1'! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:58:50' prior: 50557253!
test05createMultipleCarts
	
	| facade item firstCartId secondCartId |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 1 of: item to: firstCartId. 
	
	secondCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade listCart: secondCartId).
		 ! !

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/3/2022 20:58:51'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 20:58:51'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 20:58:51'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 20:58:51'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/3/2022 20:58:51'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/3/2022 20:58:51'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:59:21' prior: 50557296!
test05createMultipleCarts
	
	| facade item firstCartId secondCartId |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 of: item to: firstCartId. 
	
	secondCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade listCart: secondCartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 20:59:25' prior: 50557338!
test05createMultipleCarts
	
	| facade item firstCartId secondCartId |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 of: item to: firstCartId. 
	
	secondCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade listCart: secondCartId).
		 ! !

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/3/2022 20:59:35'!
FAILURE!

!classDefinition: #Repository category: 'TusLibros' stamp: 'MA 11/3/2022 21:02:28'!
Object subclass: #Repository
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 21:02:20' prior: 50557362!
test05createMultipleCarts
	
	| facade item firstCartId secondCartId |
	
	facade := Facade newWithValidator: self 
				    withPriceList: testObjectsFactory defaultCatalog 
				    withRepository: Repository new.

	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 of: item to: firstCartId. 
	
	secondCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade listCart: secondCartId).
		 ! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/3/2022 21:03:05'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/3/2022 21:03:05'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/3/2022 21:03:05'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/3/2022 21:03:05'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/3/2022 21:03:05'!
ERROR!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/3/2022 21:03:05'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/3/2022 21:03:28' prior: 50557395!
test05createMultipleCarts
	
	| facade item firstCartId secondCartId |
	
	facade := Facade newWithValidator: self 
				    withPriceList: testObjectsFactory defaultCatalog.

	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 of: item to: firstCartId. 
	
	secondCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade listCart: secondCartId).
		 ! !
!Facade class methodsFor: 'instance creation' stamp: 'MA 11/3/2022 21:04:10'!
newWithValidator: aFacadeTest withPriceList: aPriceList aRepository: withRepository  

	^self new initializeNewWithValidator: aFacadeTest withPriceList: aPriceList ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/3/2022 21:04:10' prior: 50557182!
test02createCartCreatesAnEmptyCart
	
	| facade cartId |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog aRepository: Repository new.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	self assert: OrderedCollection new equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/3/2022 21:04:10' prior: 50557166!
test03addToCartReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog aRepository: Repository new.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/3/2022 21:04:10' prior: 50557439!
test05createMultipleCarts
	
	| facade item firstCartId secondCartId |
	
	facade := Facade newWithValidator: self 
				    withPriceList: testObjectsFactory defaultCatalog aRepository: Repository new.

	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 of: item to: firstCartId. 
	
	secondCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade listCart: secondCartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/3/2022 21:04:10' prior: 50557195!
test01cannotCreateCartWithInvalidCredentials

	| facade |
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog aRepository: Repository new.
	self should: [facade createCartWithUser: self validUser password: self invalidPassword] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorMessage
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/3/2022 21:04:10' prior: 50557048!
test04addToCartMultipleTimesReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog aRepository: Repository new.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 1 of: item to: cartId. 
	facade add: 1 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !

!methodRemoval: Facade class #newWithValidator:withPriceList: stamp: 'MA 11/3/2022 21:04:10'!
newWithValidator: aFacadeTest withPriceList: aPriceList 

	^self new initializeNewWithValidator: aFacadeTest withPriceList: aPriceList !
!Facade class methodsFor: 'instance creation' stamp: 'MA 11/3/2022 21:04:47'!
newWithValidator: aFacadeTest withPriceList: aPriceList withRepository: withRepository  

	^self new initializeNewWithValidator: aFacadeTest withPriceList: aPriceList ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/3/2022 21:04:47' prior: 50557528!
test01cannotCreateCartWithInvalidCredentials

	| facade |
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog withRepository: Repository new.
	self should: [facade createCartWithUser: self validUser password: self invalidPassword] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorMessage
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/3/2022 21:04:47' prior: 50557543!
test04addToCartMultipleTimesReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog withRepository: Repository new.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 1 of: item to: cartId. 
	facade add: 1 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/3/2022 21:04:47' prior: 50557503!
test05createMultipleCarts
	
	| facade item firstCartId secondCartId |
	
	facade := Facade newWithValidator: self 
				    withPriceList: testObjectsFactory defaultCatalog withRepository: Repository new.

	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 of: item to: firstCartId. 
	
	secondCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade listCart: secondCartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/3/2022 21:04:47' prior: 50557472!
test02createCartCreatesAnEmptyCart
	
	| facade cartId |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog withRepository: Repository new.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	self assert: OrderedCollection new equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/3/2022 21:04:47' prior: 50557486!
test03addToCartReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog withRepository: Repository new.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !

!methodRemoval: Facade class #newWithValidator:withPriceList:aRepository: stamp: 'MA 11/3/2022 21:04:47'!
newWithValidator: aFacadeTest withPriceList: aPriceList aRepository: withRepository  

	^self new initializeNewWithValidator: aFacadeTest withPriceList: aPriceList !
!Facade class methodsFor: 'instance creation' stamp: 'MA 11/3/2022 21:06:07' prior: 50557569!
newWithValidator: aFacadeTest withPriceList: aPriceList withRepository: aRepository  

	^self new initializeNewWithValidator: aFacadeTest withPriceList: aPriceList ! !
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 21:06:30'!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withRepository: aRepository  

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.! !
!Facade class methodsFor: 'as yet unclassified' stamp: 'MA 11/3/2022 21:06:30' prior: 50557678!
newWithValidator: aFacadeTest withPriceList: aPriceList withRepository: aRepository  

	^self new initializeNewWithValidator: aFacadeTest withPriceList: aPriceList withRepository: aRepository ! !

!methodRemoval: Facade #initializeNewWithValidator:withPriceList: stamp: 'MA 11/3/2022 21:06:30'!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList 

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.!

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/3/2022 21:07:54'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator cart facadeTest priceList repository'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'create' stamp: 'MA 11/3/2022 21:07:53' prior: 50557288!
createCartWithUser: anUser password: aPassword 
	
	self validateUser: anUser password: aPassword.
	cart := Cart acceptingItemsOf: priceList.
	^repository save: cart.! !
!Facade methodsFor: 'initialization' stamp: 'MA 11/3/2022 21:08:07' prior: 50557686!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withRepository: aRepository  

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.
	repository := aRepository.! !
!Facade methodsFor: 'list' stamp: 'MA 11/3/2022 21:09:32' prior: 50556846!
listCart: cartId 
	
	^(repository find: cartId) items.! !

----STARTUP---- (4 November 2022 19:55:13) as /Users/main/dev/it3/CuisUniversity-5510.image!


!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/4/2022 19:56:09'!
FAILURE!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/4/2022 19:56:09'!
FAILURE!

!classRemoval: #StoreTestObjectsFactory stamp: 'MA 11/4/2022 19:56:48'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'MA 11/4/2022 19:56:48'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Facade stamp: 'MA 11/4/2022 19:56:49'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'MA 11/4/2022 19:56:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'MA 11/4/2022 19:56:50'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'MA 11/4/2022 19:56:50'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #FacadeTest stamp: 'MA 11/4/2022 19:56:50'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'MA 11/4/2022 19:56:51'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'MA 11/4/2022 19:56:51'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /Users/main/dev/it3/TusLibros.st----!
!Facade methodsFor: 'initialization' stamp: 'MA 11/4/2022 19:57:39' prior: 50557488!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withRepository: aRepository  

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.! !
!Facade methodsFor: 'initialization' stamp: 'MA 11/4/2022 19:57:58'!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList   

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.! !
!Facade class methodsFor: 'as yet unclassified' stamp: 'MA 11/4/2022 19:57:58' prior: 50557535!
newWithValidator: aFacadeTest withPriceList: aPriceList withRepository: aRepository  

	^self new initializeNewWithValidator: aFacadeTest withPriceList: aPriceList ! !

!methodRemoval: Facade #initializeNewWithValidator:withPriceList:withRepository: stamp: 'MA 11/4/2022 19:57:58'!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withRepository: aRepository  

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.!
!Facade class methodsFor: 'instance creation' stamp: 'MA 11/4/2022 19:58:36'!
newWithValidator: aFacadeTest withPriceList: aPriceList   

	^self new initializeNewWithValidator: aFacadeTest withPriceList: aPriceList ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/4/2022 19:58:36' prior: 50557211!
test05createMultipleCarts
	
	| facade item firstCartId secondCartId |
	
	facade := Facade newWithValidator: self 
				    withPriceList: testObjectsFactory defaultCatalog .

	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 of: item to: firstCartId. 
	
	secondCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade listCart: secondCartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/4/2022 19:58:36' prior: 50557163!
test02createCartCreatesAnEmptyCart
	
	| facade cartId |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog .
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	self assert: OrderedCollection new equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/4/2022 19:58:36' prior: 50557149!
test01cannotCreateCartWithInvalidCredentials

	| facade |
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog .
	self should: [facade createCartWithUser: self validUser password: self invalidPassword] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorMessage
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/4/2022 19:58:36' prior: 50557193!
test04addToCartMultipleTimesReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog .
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 1 of: item to: cartId. 
	facade add: 1 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/4/2022 19:58:36' prior: 50557176!
test03addToCartReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog .
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !

!methodRemoval: Facade class #newWithValidator:withPriceList:withRepository: stamp: 'MA 11/4/2022 19:58:36'!
newWithValidator: aFacadeTest withPriceList: aPriceList withRepository: aRepository  

	^self new initializeNewWithValidator: aFacadeTest withPriceList: aPriceList !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 19:59:52' prior: 50557690!
test05createMultipleCarts
	
	| facade item firstCartId secondCartId |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.

	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 of: item to: firstCartId. 
	
	secondCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade listCart: secondCartId).
		 ! !

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/4/2022 20:00:26'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator cart facadeTest priceList repository cartById'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'initialization' stamp: 'MA 11/4/2022 20:00:24' prior: 50557657!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList   

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.
	cartById := Dictionary new.! !

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/4/2022 20:01:24'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator cart facadeTest priceList repository cartById nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'initialization' stamp: 'MA 11/4/2022 20:01:22' prior: 50557817!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList   

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.
	cartById := Dictionary new.
	nextId := 1.! !

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/4/2022 20:01:32'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator cart facadeTest priceList repository cartById nextCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/4/2022 20:01:32' prior: 50557834!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList   

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.
	cartById := Dictionary new.
	nextCartId := 1.! !
!Facade methodsFor: 'create' stamp: 'MA 11/4/2022 20:03:10' prior: 50557506!
createCartWithUser: anUser password: aPassword 
	
	| newCartId |
	self validateUser: anUser password: aPassword.
	cart := Cart acceptingItemsOf: priceList.
	newCartId := nextCartId.
	repository at: newCartId put: cart.
	nextCartId := nextCartId successor
	^newCartId. ! !
!Facade methodsFor: 'list' stamp: 'MA 11/4/2022 20:03:40' prior: 50557497!
listCart: cartId 
	
	^(cartById at: cartId cartId) items.! !
!Facade methodsFor: 'add' stamp: 'MA 11/4/2022 20:04:32' prior: 50557501!
add: aQuantity of: anItem to: aCartId

	cart := cartById at: aCartId.
	cart add: aQuantity of: anItem.! !

Object subclass: #Facade
	instanceVariableNames: 'credentialValidator facadeTest priceList repository cartById nextCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/4/2022 20:05:26'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator facadeTest priceList repository cartById nextCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/4/2022 20:05:34'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/4/2022 20:05:34'!
ERROR!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/4/2022 20:05:34'!
ERROR!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/4/2022 20:05:34'!
ERROR!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:05:34'!
ERROR!
!Facade methodsFor: 'add' stamp: 'MA 11/4/2022 20:05:48' prior: 50557877!
add: aQuantity of: anItem to: aCartId

	| cart |
	cart := cartById at: aCartId.
	cart add: aQuantity of: anItem.! !
!Facade methodsFor: 'add' stamp: 'MA 11/4/2022 20:05:53' prior: 50557914!
add: aQuantity of: anItem to: aCartId

	| cart |
	
	cart := cartById at: aCartId.
	cart add: aQuantity of: anItem.! !

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:06:02'!
ERROR!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:06:02'!
ERROR!
!Facade methodsFor: 'create' stamp: 'MA 11/4/2022 20:07:07' prior: 50557861!
createCartWithUser: anUser password: aPassword 
	
	| newCartId |
	self validateUser: anUser password: aPassword.

	newCartId := nextCartId.
	cartById at: newCartId put: (Cart acceptingItemsOf: priceList).
	nextCartId := nextCartId successor
	^newCartId. ! !

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:07:10'!
ERROR!
!Facade methodsFor: 'create' stamp: 'MA 11/4/2022 20:07:29' prior: 50557932!
createCartWithUser: anUser password: aPassword 
	
	| newCartId |
	self validateUser: anUser password: aPassword.

	newCartId := nextCartId.
	cartById at: newCartId put: (Cart acceptingItemsOf: priceList).
	nextCartId := nextCartId + 1.
	^newCartId. ! !

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:07:31'!
ERROR!
!Facade methodsFor: 'list' stamp: 'MA 11/4/2022 20:07:40' prior: 50557872!
listCart: cartId 
	
	^(cartById at: cartId) items.! !

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:07:42'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:07:48'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/4/2022 20:07:48'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/4/2022 20:07:48'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/4/2022 20:07:48'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/4/2022 20:07:48'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:07:48'!
PASSED!
!Facade methodsFor: 'create' stamp: 'MA 11/4/2022 20:09:21'!
saveNewCart: aCart

	| newCartId |
	
	newCartId := nextCartId.
	cartById at: newCartId put: aCart.
	nextCartId := nextCartId + 1.
	^newCartId. ! !
!Facade methodsFor: 'create' stamp: 'MA 11/4/2022 20:10:03' prior: 50557986!
saveNewCart: aCart

	| newCartId |
	
	newCartId := nextCartId.
	cartById at: newCartId put: (Cart acceptingItemsOf: priceList).
	nextCartId := nextCartId + 1.
	^newCartId. ! !
!Facade methodsFor: 'create' stamp: 'MA 11/4/2022 20:10:22' prior: 50557946!
createCartWithUser: anUser password: aPassword 

	self validateUser: anUser password: aPassword.
	^self saveNewCart.! !
!Facade methodsFor: 'create' stamp: 'MA 11/4/2022 20:10:54'!
saveNewCart

	| newCartId |
	
	newCartId := nextCartId.
	cartById at: newCartId put: (Cart acceptingItemsOf: priceList).
	nextCartId := nextCartId + 1.
	^newCartId. ! !

!methodRemoval: Facade #saveNewCart: stamp: 'MA 11/4/2022 20:10:56'!
saveNewCart: aCart

	| newCartId |
	
	newCartId := nextCartId.
	cartById at: newCartId put: (Cart acceptingItemsOf: priceList).
	nextCartId := nextCartId + 1.
	^newCartId. !
!Facade methodsFor: 'create' stamp: 'MA 11/4/2022 20:11:14'!
createNewCart

	| newCartId |
	
	newCartId := nextCartId.
	cartById at: newCartId put: (Cart acceptingItemsOf: priceList).
	nextCartId := nextCartId + 1.
	^newCartId. ! !
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/4/2022 20:11:14' prior: 50558001!
createCartWithUser: anUser password: aPassword 

	self validateUser: anUser password: aPassword.
	^self createNewCart.! !

!methodRemoval: Facade #saveNewCart stamp: 'MA 11/4/2022 20:11:14'!
saveNewCart

	| newCartId |
	
	newCartId := nextCartId.
	cartById at: newCartId put: (Cart acceptingItemsOf: priceList).
	nextCartId := nextCartId + 1.
	^newCartId. !
!Facade class methodsFor: 'instance creation' stamp: 'MA 11/4/2022 20:11:42' prior: 50557682!
newWithValidator: aCredentialValidator withPriceList: aPriceList   

	^self new initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList ! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/4/2022 20:11:45'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/4/2022 20:11:45'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/4/2022 20:11:45'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/4/2022 20:11:45'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:11:45'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:13:08' prior: 50557728!
test01cannotCreateCartWithInvalidCredentials

	| facade |

	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog .
	self should: [facade createCartWithUser: self validUser password: self invalidPassword] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorMessage
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:19:47'!
test06listNonExistentFails
	
	| facade |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	self should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:20:16' prior: 50558083!
test06listNonExistentFails
	
	| facade |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	self should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !

!testRun: #FacadeTest #test06listNonExistentFails stamp: 'MA 11/4/2022 20:20:16'!
ERROR!
!Facade class methodsFor: 'error messages' stamp: 'MA 11/4/2022 20:20:21'!
cartNotFoundErrorMessage
	self shouldBeImplemented.! !
!Facade class methodsFor: 'error messages' stamp: 'MA 11/4/2022 20:20:32' prior: 50558108!
cartNotFoundErrorMessage
	
	^'cart not found'.! !

!testRun: #FacadeTest #test06listNonExistentFails stamp: 'MA 11/4/2022 20:20:33'!
FAILURE!

----End fileIn of /Users/main/dev/it3/Packages/TerseGuide.pck.st----!
!Facade methodsFor: 'list' stamp: 'MA 11/4/2022 20:23:35' prior: 50557960!
listCart: cartId 
	
	| cart |
	cart := cartById at: cartId.
	^(cart) items.! !
!Facade methodsFor: 'list' stamp: 'MA 11/4/2022 20:23:54' prior: 50561039!
listCart: cartId 
	
	| cart |
	cart := cartById at: cartId.
	^(cart) items.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/4/2022 20:23:55'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/4/2022 20:23:55'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/4/2022 20:23:55'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/4/2022 20:23:55'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:23:55'!
PASSED!

!testRun: #FacadeTest #test06listNonExistentFails stamp: 'MA 11/4/2022 20:23:55'!
FAILURE!

!testRun: #FacadeTest #test06listNonExistentFails stamp: 'MA 11/4/2022 20:23:55'!
FAILURE!
!Facade methodsFor: 'list' stamp: 'MA 11/4/2022 20:25:20' prior: 50561044!
listCart: cartId 
	
	| cart |
	
	cart := cartById at: cartId ifAbsent: [ ^ self error: self class cartNotFoundErrorMessage ].
	^(cart) items.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/4/2022 20:25:24'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/4/2022 20:25:24'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/4/2022 20:25:24'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/4/2022 20:25:24'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:25:24'!
PASSED!

!testRun: #FacadeTest #test06listNonExistentFails stamp: 'MA 11/4/2022 20:25:24'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:25:34'!
test06ListNonExistentFails
	
	| facade |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	self should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !

!methodRemoval: FacadeTest #test06listNonExistentFails stamp: 'MA 11/4/2022 20:25:34'!
test06listNonExistentFails
	
	| facade |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	self should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:25:46'!
test07ListNonExistentFails
	
	| facade |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	self should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:25:54'!
test06ListNonExistentCartFails
	
	| facade |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	self should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !

!methodRemoval: FacadeTest #test06ListNonExistentFails stamp: 'MA 11/4/2022 20:25:54'!
test06ListNonExistentFails
	
	| facade |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	self should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:26:04'!
test07AddToNonExistentCartFails
	
	| facade |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	self should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !

!methodRemoval: FacadeTest #test07ListNonExistentFails stamp: 'MA 11/4/2022 20:26:04'!
test07ListNonExistentFails
	
	| facade |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	self should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:26:53' prior: 50561152!
test07AddToNonExistentCartFails
	
	| facade |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	self should: [facade add: 1 of: testObjectsFactory itemSellByTheStore for ] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:27:09' prior: 50561175!
test07AddToNonExistentCartFails
	
	| facade |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	self should: [facade add: 1 of: testObjectsFactory itemSellByTheStore to: 1 ] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:27:12' prior: 50561188!
test07AddToNonExistentCartFails
	
	| facade |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	self should: [ facade add: 1 of: testObjectsFactory itemSellByTheStore to: 1 ] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/4/2022 20:27:13'!
FAILURE!
!Facade methodsFor: 'add' stamp: 'MA 11/4/2022 20:27:41' prior: 50557920!
add: aQuantity of: anItem to: aCartId

	| cart |
	
	cart := cartById at: aCartId ifAbsent: [ self error: self class cartNotFoundErrorMessage ].
	cart add: aQuantity of: anItem.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/4/2022 20:27:43'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/4/2022 20:27:43'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/4/2022 20:27:43'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/4/2022 20:27:43'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:27:43'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/4/2022 20:27:43'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/4/2022 20:27:43'!
PASSED!
!Facade methodsFor: 'add' stamp: 'MA 11/4/2022 20:28:10'!
findCart: aCartId

	^ cartById at: aCartId ifAbsent: [ self error: self class cartNotFoundErrorMessage ]! !
!Facade methodsFor: 'add' stamp: 'MA 11/4/2022 20:28:10' prior: 50561217!
add: aQuantity of: anItem to: aCartId

	| cart |
	
	cart := self findCart: aCartId.
	cart add: aQuantity of: anItem.! !
!Facade methodsFor: 'list' stamp: 'MA 11/4/2022 20:28:48' prior: 50561071!
listCart: cartId 
	
	| cart |
	
	cart := self findCart: cartId.
	^(cart) items.! !
!Facade methodsFor: 'list' stamp: 'MA 11/4/2022 20:28:53' prior: 50561260!
listCart: cartId 
	
	^(self findCart: cartId) items.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/4/2022 20:28:57'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/4/2022 20:28:57'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/4/2022 20:28:57'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/4/2022 20:28:57'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:28:57'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/4/2022 20:28:57'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/4/2022 20:28:57'!
PASSED!
!Facade methodsFor: 'add' stamp: 'MA 11/4/2022 20:29:10' prior: 50561253!
add: aQuantity of: anItem to: aCartId

	(self findCart: aCartId) add: aQuantity of: anItem.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/4/2022 20:29:49'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/4/2022 20:29:49'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/4/2022 20:29:49'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/4/2022 20:29:49'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:29:49'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/4/2022 20:29:49'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/4/2022 20:29:49'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:34:21'!
test08CheckoutNonExistentCartFails
	
	| facade |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	self should: [ facade checkoutCart: 1 withCcn: '1234567812345678' withCced: Date today withCco: 'Hernan Wilkinson' ] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:37:20' prior: 50561318!
test08CheckoutNonExistentCartFails
	
	| facade cced |
	
	facade := Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog.
	cced := Month month: 2 year: 2020.  
	self should: [ facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson' ] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/4/2022 20:37:34'!
ERROR!
!Facade methodsFor: 'checkout' stamp: 'MA 11/4/2022 20:37:48'!
checkoutCart: aString withCcn: aString2 withCced: cced withCco: aString4 
	self shouldBeImplemented.! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/4/2022 20:39:19' prior: 50561350!
checkoutCart: aCartId withCcn: aCreditCardNumber withCced: aCreditCardExpirationDate withCco: aCreditCardOwner 
	
	self error: self class cartNotFoundErrorMessage.! !

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/4/2022 20:39:21'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/4/2022 20:39:21'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/4/2022 20:39:21'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/4/2022 20:39:21'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/4/2022 20:39:21'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:39:21'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/4/2022 20:39:21'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/4/2022 20:39:21'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/4/2022 20:39:21'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/4/2022 20:40:06'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/4/2022 20:40:06'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/4/2022 20:40:06'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/4/2022 20:40:06'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/4/2022 20:40:06'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:40:06'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/4/2022 20:40:06'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/4/2022 20:40:06'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/4/2022 20:40:06'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:40:59'!
defaultFacade

	^ Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:40:59' prior: 50561332!
test08CheckoutNonExistentCartFails
	
	| facade cced |
	
	facade := self defaultFacade.
	cced := Month month: 2 year: 2020.  
	self should: [ facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson' ] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:40:59' prior: 50561201!
test07AddToNonExistentCartFails
	
	| facade |
	
	facade := self defaultFacade.
	self should: [ facade add: 1 of: testObjectsFactory itemSellByTheStore to: 1 ] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:40:59' prior: 50557742!
test04addToCartMultipleTimesReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := self defaultFacade .
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 1 of: item to: cartId. 
	facade add: 1 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:40:59' prior: 50557715!
test02createCartCreatesAnEmptyCart
	
	| facade cartId |
	
	facade := self defaultFacade .
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	self assert: OrderedCollection new equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:40:59' prior: 50557785!
test05createMultipleCarts
	
	| facade item firstCartId secondCartId |
	
	facade := self defaultFacade.

	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 of: item to: firstCartId. 
	
	secondCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade listCart: secondCartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:40:59' prior: 50557760!
test03addToCartReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := self defaultFacade .
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:40:59' prior: 50561130!
test06ListNonExistentCartFails
	
	| facade |
	
	facade := self defaultFacade.
	self should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:40:59' prior: 50558070!
test01cannotCreateCartWithInvalidCredentials

	| facade |

	facade := self defaultFacade .
	self should: [facade createCartWithUser: self validUser password: self invalidPassword] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorMessage
		 ! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/4/2022 20:41:05'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/4/2022 20:41:06'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/4/2022 20:41:06'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/4/2022 20:41:06'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/4/2022 20:41:06'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:41:06'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/4/2022 20:41:06'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/4/2022 20:41:06'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/4/2022 20:41:06'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:42:34'!
test09
	
	| facade cced |
	
	facade := self defaultFacade.
	cced := Month month: 2 year: 2020.  
	facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson'
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:43:06' prior: 50561564!
test09
	
	| facade cced cartId |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId. 
	cced := Month month: 2 year: 2020.  
	facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson'
		 ! !

!testRun: #FacadeTest #test09 stamp: 'MA 11/4/2022 20:43:46'!
ERROR!
!Facade methodsFor: 'checkout' stamp: 'MA 11/4/2022 20:44:40' prior: 50561356!
checkoutCart: aCartId withCcn: aCreditCardNumber withCced: aCreditCardExpirationDate withCco: aCreditCardOwner 
	
	self findCart: aCartId.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/4/2022 20:44:41'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/4/2022 20:44:41'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/4/2022 20:44:41'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/4/2022 20:44:41'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 20:44:41'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/4/2022 20:44:41'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/4/2022 20:44:41'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/4/2022 20:44:41'!
PASSED!

!testRun: #FacadeTest #test09 stamp: 'MA 11/4/2022 20:44:41'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:45:42'!
test09CheckoutValidCartSucceed
	
	| facade cced cartId |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId. 
	cced := Month month: 2 year: 2020.  
	facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson'
		 ! !

!methodRemoval: FacadeTest #test09 stamp: 'MA 11/4/2022 20:45:48'!
test09
	
	| facade cced cartId |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId. 
	cced := Month month: 2 year: 2020.  
	facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson'
		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:52:56' prior: 50561426!
test08CheckoutNonExistentCartFails
	
	| facade cced |
	
	facade := self defaultFacade.
	cced := Month month: 2 year: 2020.  
	self should: [ facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson' ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :error | 
			self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			facade listPurchasesForCartId: 1 withUserId: self validUser withPassword: self validPassword. 
		]
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:59:07' prior: 50561651!
test08CheckoutNonExistentCartFails
	
	| facade cced |
	
	facade := self defaultFacade.
	cced := Month month: 2 year: 2020.  
	self should: [ facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson' ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :error | 
			self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			self assert: OrderedCollection new equals: (facade listPurchasesForUserId: self validUser withPassword: self validPassword). 
		]
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:59:19' prior: 50561669!
test08CheckoutNonExistentCartFails
	
	| facade cced |
	
	facade := self defaultFacade.
	cced := Month month: 2 year: 2020.  
	self should: [ facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson' ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :error | 
			| purchases |
	self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: OrderedCollection new equals: (purchases). 
		]
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:59:30' prior: 50561688!
test08CheckoutNonExistentCartFails
	
	| facade cced |
	
	facade := self defaultFacade.
	cced := Month month: 2 year: 2020.  
	self should: [ facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson' ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :error | | purchases |
			self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: (purchases). 
		]
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:59:35' prior: 50561709!
test08CheckoutNonExistentCartFails
	
	| facade cced |
	
	facade := self defaultFacade.
	cced := Month month: 2 year: 2020.  
	self should: [ facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson' ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :error | | purchases |
			self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases. 
		]
		 ! !

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/4/2022 20:59:41'!
ERROR!
!Facade methodsFor: 'purchases' stamp: 'MA 11/4/2022 20:59:52'!
listPurchasesForUserId: aString withPassword: aString2 
	self shouldBeImplemented.! !
!Facade methodsFor: 'purchases' stamp: 'MA 11/4/2022 21:00:10' prior: 50561753!
listPurchasesForUserId: aUserId withPassword: aPassword 
	
	^OrderedCollection new.! !

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/4/2022 21:00:11'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/4/2022 21:00:11'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/4/2022 21:00:11'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/4/2022 21:00:11'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/4/2022 21:00:11'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 21:00:11'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/4/2022 21:00:11'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/4/2022 21:00:11'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/4/2022 21:00:11'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/4/2022 21:00:11'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/4/2022 21:00:16'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/4/2022 21:00:16'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/4/2022 21:00:16'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/4/2022 21:00:16'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/4/2022 21:00:16'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/4/2022 21:00:16'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/4/2022 21:00:16'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/4/2022 21:00:16'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/4/2022 21:00:16'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/4/2022 21:00:16'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 21:01:52' prior: 50561623!
test09CheckoutValidCartSucceed
	
	| facade cced cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore
	facade add: 2 of: item to: cartId. 
	cced := Month month: 2 year: 2020.  
	facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson'.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with item) equals: purchases
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 21:02:04' prior: 50561827!
test09CheckoutValidCartSucceed
	
	| facade cced cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	cced := Month month: 2 year: 2020.  
	facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson'.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with item) equals: purchases
		 ! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/4/2022 21:02:05'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 21:02:16' prior: 50561848!
test09CheckoutValidCartSucceed
	
	| facade cced cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	cced := Month month: 2 year: 2020.  
	facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson'.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item) equals: purchases
		 ! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/4/2022 21:02:18'!
FAILURE!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 18:44:03'!
FAILURE!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'MA 11/5/2022 18:50:23'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'MA 11/5/2022 18:50:24'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'MA 11/5/2022 18:50:22'!
initializeExpiringOn: aMonth withNumber: aNumber withOwner: anOwner
	
	expiration := aMonth.
	number := aNumber.
	owner := anOwner.! !
!CreditCard methodsFor: 'initialization' stamp: 'MA 11/5/2022 18:51:09' prior: 50561913!
initializeExpiringOn: aMonth withNumber: aNumber withOwner: anOwner
	"Ya esta hecho y testeado en la iteracion anterior"
	expiration := aMonth.
	number := aNumber.
	owner := anOwner.! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 18:51:29' prior: 50561589!
checkoutCart: aCartId withCcn: aCreditCardNumber withCced: aCreditCardExpirationDate withCco: aCreditCardOwner 
	
	| cart |
	cart := self findCart: aCartId.! !

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/5/2022 18:53:59'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator facadeTest priceList repository cartById nextCartId merchantProcesor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 18:53:52' prior: 50561929!
checkoutCart: aCartId withCcn: aCreditCardNumber withCced: aCreditCardExpirationDate withCco: aCreditCardOwner 
	
	| cart creditCard |
	
	cart := self findCart: aCartId.
	creditCard := CreditCard expiringOn: aCreditCardExpirationDate withNumber: aCreditCardNumber withOwner: aCreditCardOwner.
	Cashier toCheckout: cart charging: creditCard throught: merchantProcesor on: self today registeringOn: Dictionary new.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MA 11/5/2022 18:54:47'!
expiringOn: aMonth withNumber: aNumber withOwner: anOwner.
	
	^self new initializeExpiringOn: aMonth withNumber: aNumber withOwner: anOwner.! !

!methodRemoval: CreditCard class #expiringOn: stamp: 'MA 11/5/2022 18:54:55'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MA 11/5/2022 18:55:29' prior: 50557624!
expiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber - 1) withNumber: '1234567812345678' withOwner: 'Hernan Wilkinson'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MA 11/5/2022 18:55:34' prior: 50557631!
notExpiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1) withNumber: '1234567812345678' withOwner: 'Hernan Wilkinson'! !

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'MA 11/5/2022 18:55:50'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !
!CreditCard methodsFor: 'initialization' stamp: 'MA 11/5/2022 18:55:54' prior: 50561920!
initializeExpiringOn: aMonth withNumber: aNumber withOwner: anOwner

	expiration := aMonth.
	number := aNumber.
	owner := anOwner.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MA 11/5/2022 18:56:05' prior: 50561962!
expiringOn: aMonth withNumber: aNumber withOwner: anOwner.
	"Ya esta hecho y testeado en la iteracion anterior"
	^self new initializeExpiringOn: aMonth withNumber: aNumber withOwner: anOwner.! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 18:56:43' prior: 50561946!
checkoutCart: aCartId withCcn: aCreditCardNumber withCced: aCreditCardExpirationDate withCco: aCreditCardOwner 
	
	| cart creditCard |
	
	cart := self findCart: aCartId.
	creditCard := CreditCard expiringOn: aCreditCardExpirationDate withNumber: aCreditCardNumber withOwner: aCreditCardOwner.
	Cashier toCheckout: cart charging: creditCard throught: merchantProcesor on: self today registeringOn: OrderedCollection new.! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 18:56:49' prior: 50562014!
checkoutCart: aCartId withCcn: aCcn withCced: aCreditCardExpirationDate withCco: aCreditCardOwner 
	
	| cart creditCard |
	
	cart := self findCart: aCartId.
	creditCard := CreditCard expiringOn: aCreditCardExpirationDate withNumber: aCcn withOwner: aCreditCardOwner.
	Cashier toCheckout: cart charging: creditCard throught: merchantProcesor on: self today registeringOn: OrderedCollection new.! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 18:56:53' prior: 50562030!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCreditCardOwner 
	
	| cart creditCard |
	
	cart := self findCart: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCreditCardOwner.
	Cashier toCheckout: cart charging: creditCard throught: merchantProcesor on: self today registeringOn: OrderedCollection new.! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 18:56:58' prior: 50562045!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard |
	
	cart := self findCart: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
	Cashier toCheckout: cart charging: creditCard throught: merchantProcesor on: self today registeringOn: OrderedCollection new.! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 18:57:25' prior: 50562059!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard |
	
	cart := self findCart: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
	Cashier toCheckout: cart 
		     charging: creditCard 
		     throught: merchantProcesor 
		     on: self today 
		     registeringOn: OrderedCollection new.! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 18:57:30' prior: 50562072!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard |
	
	cart := self findCart: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
	Cashier toCheckout: cart
		     charging: creditCard 
		     throught: merchantProcesor 
		     on: self today 
		     registeringOn: OrderedCollection new.! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 18:57:50' prior: 50562086!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard |
	
	cart := self findCart: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
	Cashier toCheckout: cart
		     charging: creditCard 
		     throught: merchantProcesor 
		     on: DateAndTime today
		     registeringOn: OrderedCollection new.! !
!Cashier methodsFor: 'checkout - private' stamp: 'MA 11/5/2022 19:11:36' prior: 50557361!
createSale

	^ Sale of: total with: cart items
! !
!Sale class methodsFor: 'instance creation' stamp: 'MA 11/5/2022 19:13:02'!
of: aTotal with: items

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal with: items.
	 ! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'MA 11/5/2022 19:14:09'!
Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'MA 11/5/2022 19:14:07'!
initializeTotal: aTotal with: someItems

	total := aTotal. 
	items := someItems.! !

!methodRemoval: Sale class #of: stamp: 'MA 11/5/2022 19:14:33'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !

!methodRemoval: Sale #initializeTotal: stamp: 'MA 11/5/2022 19:15:00'!
initializeTotal: aTotal

	total := aTotal !

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/5/2022 19:15:52'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator facadeTest priceList repository cartById nextCartId merchantProcesor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'initialization' stamp: 'MA 11/5/2022 19:15:50' prior: 50557852!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList   

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.
	cartById := Dictionary new.
	nextCartId := 1.
	salesBook := OrderedCollection new.! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 19:16:03' prior: 50562100!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard |
	
	cart := self findCart: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
	Cashier toCheckout: cart
		     charging: creditCard 
		     throught: merchantProcesor 
		     on: DateAndTime today
		     registeringOn: salesBook.! !
!Facade class methodsFor: 'instance creation' stamp: 'MA 11/5/2022 19:17:22'!
newWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor    

	^self new initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:17:22' prior: 50561420!
defaultFacade

	^ Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog withMerchantProcessor: merchantProcessor! !

!methodRemoval: Facade class #newWithValidator:withPriceList: stamp: 'MA 11/5/2022 19:17:22'!
newWithValidator: aCredentialValidator withPriceList: aPriceList   

	^self new initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList !
!Facade methodsFor: 'initialization' stamp: 'MA 11/5/2022 19:18:16'!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor    

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.
	cartById := Dictionary new.
	nextCartId := 1.
	salesBook := OrderedCollection new.! !
!Facade class methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:18:16' prior: 50562180!
newWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor    

	^self new initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor ! !

!methodRemoval: Facade #initializeNewWithValidator:withPriceList: stamp: 'MA 11/5/2022 19:18:16'!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList   

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.
	cartById := Dictionary new.
	nextCartId := 1.
	salesBook := OrderedCollection new.!

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/5/2022 19:18:41'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator facadeTest priceList repository cartById nextCartId merchantProcesor salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'initialization' stamp: 'MA 11/5/2022 19:18:40' prior: 50562205!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor    

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.
	merchantProcessor := aMerchantProcessor.
	cartById := Dictionary new.
	nextCartId := 1.
	salesBook := OrderedCollection new.! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 19:18:53' prior: 50562166!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard |
	
	cart := self findCart: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
	Cashier toCheckout: cart
		     charging: creditCard 
		     throught: merchantProcessor 
		     on: DateAndTime today
		     registeringOn: salesBook.! !

Object subclass: #Facade
	instanceVariableNames: 'credentialValidator facadeTest priceList repository cartById nextCartId salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/5/2022 19:19:09'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator facadeTest priceList repository cartById nextCartId salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 19:20:15' prior: 50562190!
defaultFacade

	^ Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog withMerchantProcessor: self! !

!classRenamed: #Repository as: #CartSession stamp: 'MA 11/5/2022 19:27:49'!
Smalltalk renameClassNamed: #Repository as: #CartSession!
!Facade methodsFor: 'persistence private' stamp: 'MA 11/5/2022 19:28:52' prior: 50558022!
createNewCart

	| newCartId |
	
	newCartId := nextCartId.
	cartById at: newCartId put: (CartSession withCart: (Cart acceptingItemsOf: priceList) forUserId).
	nextCartId := nextCartId + 1.
	^newCartId. ! !

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/5/2022 19:29:09'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator facadeTest priceList repository cartSessionByCartId nextCartId salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:29:09' prior: 50562248!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor    

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.
	merchantProcessor := aMerchantProcessor.
	cartSessionByCartId := Dictionary new.
	nextCartId := 1.
	salesBook := OrderedCollection new.! !
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:29:09' prior: 50562304!
createNewCart

	| newCartId |
	
	newCartId := nextCartId.
	cartSessionByCartId at: newCartId put: (CartSession withCart: (Cart acceptingItemsOf: priceList) forUserId).
	nextCartId := nextCartId + 1.
	^newCartId. ! !
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:29:09' prior: 50561247!
findCart: aCartId

	^ cartSessionByCartId at: aCartId ifAbsent: [ self error: self class cartNotFoundErrorMessage ]! !
!Facade methodsFor: 'persistence private' stamp: 'MA 11/5/2022 19:30:18' prior: 50562347!
findCart: aCartId

	| cartSession |
	
	cartSession := cartSessionByCartId at: aCartId ifAbsent: [ self error: self class cartNotFoundErrorMessage ].
	^cartSession cart.! !
!Facade methodsFor: 'persistence private' stamp: 'MA 11/5/2022 19:31:35'!
createNewCart: anUserId

	| newCartId |
	
	newCartId := nextCartId.
	cartSessionByCartId at: newCartId put: (CartSession withCart: (Cart acceptingItemsOf: priceList) forUserId).
	nextCartId := nextCartId + 1.
	^newCartId. ! !
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:31:35' prior: 50558031!
createCartWithUser: anUser password: aPassword 

	self validateUser: anUser password: aPassword.
	^self createNewCart: anUserId.! !

!methodRemoval: Facade #createNewCart stamp: 'MA 11/5/2022 19:31:35'!
createNewCart

	| newCartId |
	
	newCartId := nextCartId.
	cartSessionByCartId at: newCartId put: (CartSession withCart: (Cart acceptingItemsOf: priceList) forUserId).
	nextCartId := nextCartId + 1.
	^newCartId. !
!Facade methodsFor: 'create' stamp: 'MA 11/5/2022 19:31:47' prior: 50562372!
createCartWithUser: anUser password: aPassword 

	self validateUser: anUser password: aPassword.
	^self createNewCart: anUser.! !
!Facade methodsFor: 'persistence private' stamp: 'MA 11/5/2022 19:32:00'!
createNewCartFor: anUserId

	| newCartId |
	
	newCartId := nextCartId.
	cartSessionByCartId at: newCartId put: (CartSession withCart: (Cart acceptingItemsOf: priceList) forUserId).
	nextCartId := nextCartId + 1.
	^newCartId. ! !
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:32:00' prior: 50562388!
createCartWithUser: anUser password: aPassword 

	self validateUser: anUser password: aPassword.
	^self createNewCartFor: anUser.! !

!methodRemoval: Facade #createNewCart: stamp: 'MA 11/5/2022 19:32:00'!
createNewCart: anUserId

	| newCartId |
	
	newCartId := nextCartId.
	cartSessionByCartId at: newCartId put: (CartSession withCart: (Cart acceptingItemsOf: priceList) forUserId).
	nextCartId := nextCartId + 1.
	^newCartId. !
!Facade methodsFor: 'persistence private' stamp: 'MA 11/5/2022 19:32:09' prior: 50562395!
createNewCartFor: anUserId

	| newCartId |
	
	newCartId := nextCartId.
	cartSessionByCartId at: newCartId put: (CartSession withCart: (Cart acceptingItemsOf: priceList) forUserId: anUserId).
	nextCartId := nextCartId + 1.
	^newCartId. ! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 19:32:14'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 19:32:14'!
ERROR!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 19:32:14'!
ERROR!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 19:32:14'!
ERROR!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 19:32:14'!
ERROR!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 19:32:14'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 19:32:14'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 19:32:14'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 19:32:14'!
ERROR!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 19:32:18'!
ERROR!
!CartSession class methodsFor: 'instance creation' stamp: 'MA 11/5/2022 19:32:24'!
withCart: aCart forUserId: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCart: aCart forUserId: aString ! !
!CartSession class methodsFor: 'instance creation' stamp: 'MA 11/5/2022 19:32:37' prior: 50562463!
withCart: aCart forUserId: anUserId 

	^self new initializeWithCart: aCart forUserId: anUserId ! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 19:32:38'!
ERROR!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'MA 11/5/2022 19:32:51'!
Object subclass: #CartSession
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'MA 11/5/2022 19:32:51'!
Object subclass: #CartSession
	instanceVariableNames: 'cart userId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'initialization' stamp: 'MA 11/5/2022 19:32:51'!
initializeWithCart: aCart forUserId: anUserId 
	self shouldBeImplemented.
	cart := aCart.
	userId := anUserId.! !
!CartSession methodsFor: 'initialization' stamp: 'MA 11/5/2022 19:32:56' prior: 50562496!
initializeWithCart: aCart forUserId: anUserId 

	cart := aCart.
	userId := anUserId.! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 19:32:58'!
ERROR!
!CartSession methodsFor: 'accessing' stamp: 'MA 11/5/2022 19:33:07'!
cart
	self shouldBeImplemented.
	^cart! !
!CartSession methodsFor: 'accessing' stamp: 'MA 11/5/2022 19:33:13' prior: 50562511!
cart

	^cart! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 19:33:15'!
ERROR!
!Facade methodsFor: 'initialization' stamp: 'MA 11/5/2022 19:36:21'!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor withClock: aClock     

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.
	merchantProcessor := aMerchantProcessor.
	cartSessionByCartId := Dictionary new.
	nextCartId := 1.
	salesBook := OrderedCollection new.! !
!Facade class methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:36:21' prior: 50562217!
newWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor    

	^self new initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor withClock: aClock ! !

!methodRemoval: Facade #initializeNewWithValidator:withPriceList:withMerchantProcessor: stamp: 'MA 11/5/2022 19:36:21'!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor    

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.
	merchantProcessor := aMerchantProcessor.
	cartSessionByCartId := Dictionary new.
	nextCartId := 1.
	salesBook := OrderedCollection new.!
!Facade class methodsFor: 'instance creation' stamp: 'MA 11/5/2022 19:36:54'!
newWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor withClock: aClock     

	^self new initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor withClock: aClock ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:36:54' prior: 50562292!
defaultFacade

	^ Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog withMerchantProcessor: self withClock: aClock! !

!methodRemoval: Facade class #newWithValidator:withPriceList:withMerchantProcessor: stamp: 'MA 11/5/2022 19:36:54'!
newWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor    

	^self new initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor withClock: aClock !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 19:37:01' prior: 50562573!
defaultFacade

	^ Facade newWithValidator: self withPriceList: testObjectsFactory defaultCatalog withMerchantProcessor: self withClock: self! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 19:37:13'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 19:37:13'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 19:37:13'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 19:37:13'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 19:37:13'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 19:37:13'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 19:37:13'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 19:37:13'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 19:37:13'!
ERROR!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 19:37:13'!
ERROR!

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/5/2022 19:37:34'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator facadeTest priceList repository cartSessionByCartId nextCartId salesBook merchantProcessor clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'initialization' stamp: 'MA 11/5/2022 19:37:33' prior: 50562521!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor withClock: aClock     

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	cartSessionByCartId := Dictionary new.
	nextCartId := 1.
	salesBook := OrderedCollection new.! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 19:37:53' prior: 50562261!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard |
	
	cart := self findCart: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
	Cashier toCheckout: cart
		     charging: creditCard 
		     throught: merchantProcessor 
		     on: clock today
		     registeringOn: salesBook.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 19:37:56'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 19:37:56'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 19:37:56'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 19:37:56'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 19:37:56'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 19:37:56'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 19:37:56'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 19:37:56'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 19:37:56'!
ERROR!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 19:37:56'!
ERROR!
!FacadeTest methodsFor: 'clock double' stamp: 'MA 11/5/2022 19:38:15'!
today
	self shouldBeImplemented.! !

!classDefinition: #FacadeTest category: 'TusLibros' stamp: 'MA 11/5/2022 19:39:21'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'testObjectsFactory now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTest methodsFor: 'clock double' stamp: 'MA 11/5/2022 19:39:18' prior: 50562701!
today
	
	^now.! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 19:39:26'!
ERROR!
!FacadeTest methodsFor: 'clock double' stamp: 'MA 11/5/2022 19:39:47'!
now
	
	^now.! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'MA 11/5/2022 19:39:47'!
now
	
	^ today! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:39:47' prior: 50557074!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory now
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:39:47' prior: 50557056!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory now
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:39:47' prior: 50557035!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory now
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:39:47' prior: 50562656!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard |
	
	cart := self findCart: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
	Cashier toCheckout: cart
		     charging: creditCard 
		     throught: merchantProcessor 
		     on: clock now
		     registeringOn: salesBook.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:39:47' prior: 50557001!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory now
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:39:47' prior: 50557019!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory now 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:39:47' prior: 50557098!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory now
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!methodRemoval: FacadeTest #today stamp: 'MA 11/5/2022 19:39:47'!
today
	
	^now.!

!methodRemoval: StoreTestObjectsFactory #today stamp: 'MA 11/5/2022 19:39:47'!
today
	
	^ today!
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'MA 11/5/2022 19:41:10'!
today
	
	^ today! !

!methodRemoval: StoreTestObjectsFactory #now stamp: 'MA 11/5/2022 19:41:10'!
now
	
	^ today!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:41:36' prior: 50562726!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:41:36' prior: 50562804!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:41:36' prior: 50562839!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:41:36' prior: 50562751!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:41:36' prior: 50562822!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:41:36' prior: 50562769!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MA 11/5/2022 19:41:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MA 11/5/2022 19:41:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MA 11/5/2022 19:41:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MA 11/5/2022 19:41:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MA 11/5/2022 19:41:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MA 11/5/2022 19:41:38'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MA 11/5/2022 19:41:38'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 19:43:21' prior: 50561872!
test09CheckoutValidCartSucceed
	
	| facade cced cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	now := DateAndTime today.
	cced := Month month: now monthNumber year: now yearNumber - 1.  
	facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson'.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item) equals: purchases
		 ! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 19:43:25'!
ERROR!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 19:43:37'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 19:46:05' prior: 50563028!
test09CheckoutValidCartSucceed
	
	| facade cced cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	now := DateAndTime now.
	cced := Month month: now monthNumber year: now yearNumber - 1.  
	facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson'.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item) equals: purchases
		 ! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 19:46:06'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 19:47:19' prior: 50563056!
test09CheckoutValidCartSucceed
	
	| facade cced cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	now := DateAndTime now.
	cced := Month month: now monthIndex year: now yearIndex - 1.  
	facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson'.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item) equals: purchases
		 ! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 19:47:23'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 19:48:00' prior: 50563081!
test09CheckoutValidCartSucceed
	
	| facade cced cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	now := DateAndTime now.
	cced := Month month: now monthIndex year: now yearNumber - 1.  
	facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson'.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item) equals: purchases
		 ! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 19:48:01'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 19:48:07' prior: 50563106!
test09CheckoutValidCartSucceed
	
	| facade cced cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	now := DateAndTime now.
	cced := Month month: now monthIndex year: now yearNumber + 1.  
	facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson'.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item) equals: purchases
		 ! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 19:48:08'!
FAILURE!
!Facade methodsFor: 'initialization' stamp: 'MA 11/5/2022 19:49:17' prior: 50562641!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor withClock: aClock     

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	cartSessionByCartId := Dictionary new.
	nextCartId := 1.
	salesBook := OrderedCollection new.! !

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/5/2022 19:49:23'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator facadeTest priceList repository cartSessionByCartId nextCartId salesBookPerUser merchantProcessor clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:49:23' prior: 50562790!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard |
	
	cart := self findCart: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
	Cashier toCheckout: cart
		     charging: creditCard 
		     throught: merchantProcessor 
		     on: clock now
		     registeringOn: salesBookPerUser.! !
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:49:23' prior: 50563157!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor withClock: aClock     

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	cartSessionByCartId := Dictionary new.
	nextCartId := 1.
	salesBookPerUser := OrderedCollection new.! !
!Facade methodsFor: 'initialization' stamp: 'MA 11/5/2022 19:49:27' prior: 50563196!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor withClock: aClock     

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	cartSessionByCartId := Dictionary new.
	nextCartId := 1.
	salesBookPerUser := Dictionary new.! !
!Facade methodsFor: 'persistence private' stamp: 'MA 11/5/2022 19:50:22'!
createNewCartSessionFor: anUserId

	| newCartId |
	
	newCartId := nextCartId.
	cartSessionByCartId at: newCartId put: (CartSession withCart: (Cart acceptingItemsOf: priceList) forUserId: anUserId).
	nextCartId := nextCartId + 1.
	^newCartId. ! !
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:50:22' prior: 50562405!
createCartWithUser: anUser password: aPassword 

	self validateUser: anUser password: aPassword.
	^self createNewCartSessionFor: anUser.! !

!methodRemoval: Facade #createNewCartFor: stamp: 'MA 11/5/2022 19:50:22'!
createNewCartFor: anUserId

	| newCartId |
	
	newCartId := nextCartId.
	cartSessionByCartId at: newCartId put: (CartSession withCart: (Cart acceptingItemsOf: priceList) forUserId: anUserId).
	nextCartId := nextCartId + 1.
	^newCartId. !
!Facade methodsFor: 'persistence private' stamp: 'MA 11/5/2022 19:50:34'!
findCartSession: aCartId

	| cartSession |
	
	cartSession := cartSessionByCartId at: aCartId ifAbsent: [ self error: self class cartNotFoundErrorMessage ].
	^cartSession cart.! !
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:50:34' prior: 50561291!
add: aQuantity of: anItem to: aCartId

	(self findCartSession: aCartId) add: aQuantity of: anItem.! !
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:50:34' prior: 50563182!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard |
	
	cart := self findCartSession: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
	Cashier toCheckout: cart
		     charging: creditCard 
		     throught: merchantProcessor 
		     on: clock now
		     registeringOn: salesBookPerUser.! !
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 19:50:34' prior: 50561265!
listCart: cartId 
	
	^(self findCartSession: cartId) items.! !

!methodRemoval: Facade #findCart: stamp: 'MA 11/5/2022 19:50:34'!
findCart: aCartId

	| cartSession |
	
	cartSession := cartSessionByCartId at: aCartId ifAbsent: [ self error: self class cartNotFoundErrorMessage ].
	^cartSession cart.!
!Facade methodsFor: 'add' stamp: 'MA 11/5/2022 19:50:42' prior: 50563262!
add: aQuantity of: anItem to: aCartId

	(self findCartSession: aCartId) cart add: aQuantity of: anItem.! !
!Facade methodsFor: 'list' stamp: 'MA 11/5/2022 19:50:54' prior: 50563283!
listCart: cartId 
	
	^(self findCartSession: cartId) cart items.! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 19:51:06' prior: 50563268!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cartSession creditCard |
	
	cartSession := self findCartSession: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
	Cashier toCheckout: cartSession
		     charging: creditCard 
		     throught: merchantProcessor 
		     on: clock now
		     registeringOn: salesBookPerUser.! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 19:53:18' prior: 50563306!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cartSession creditCard salesBook |
	
	cartSession := self findCartSession: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
	salesBook := salesBookPerUser at: (cartSession userId) ifAbsent: [OrderedCollection new].
	salesBookPerUser at: (cartSession userId) put: salesBook.
	Cashier toCheckout: cartSession cart
		     charging: creditCard 
		     throught: merchantProcessor 
		     on: clock now
		     registeringOn: salesBook.! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 19:56:00' prior: 50563321!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cartSession creditCard salesBook |
	
	cartSession := self findCartSession: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
	salesBook := salesBookPerUser at: (cartSession userId) ifAbsent: [ | newSalesBook | 
		newSalesBook := OrderedCollection new.
		salesBookPerUser at: (cartSession userId) put: newSalesBook.
		newSalesBook
	].
	
	Cashier toCheckout: cartSession cart
		     charging: creditCard 
		     throught: merchantProcessor 
		     on: clock now
		     registeringOn: salesBook.! !
!Facade methodsFor: 'purchases' stamp: 'MA 11/5/2022 19:59:46' prior: 50561759!
listPurchasesForUserId: anUserId withPassword: aPassword 
	
	| salesBooks |
	salesBooks := salesBookPerUser at: anUserId ifAbsent: [OrderedCollection new].
	^salesBooks inject: OrderedCollection new into: [ :items :salesBook | (items addAll: salesBook items). items ].
	! !
!Facade methodsFor: 'purchases' stamp: 'MA 11/5/2022 19:59:57' prior: 50563363!
listPurchasesForUserId: anUserId withPassword: aPassword 
	
	| salesBooks |
	salesBooks := salesBookPerUser at: anUserId ifAbsent: [OrderedCollection new].
	^salesBooks inject: OrderedCollection new into: [ :items :salesBook | 
		items addAll: salesBook items. 
		items 
	].
	! !
!Facade methodsFor: 'purchases' stamp: 'MA 11/5/2022 19:59:59' prior: 50563375!
listPurchasesForUserId: anUserId withPassword: aPassword 
	
	| salesBooks |

	salesBooks := salesBookPerUser at: anUserId ifAbsent: [OrderedCollection new].
	^salesBooks inject: OrderedCollection new into: [ :items :salesBook | 
		items addAll: salesBook items. 
		items 
	].
	! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:00:01'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:00:01'!
ERROR!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:00:01'!
ERROR!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:00:01'!
ERROR!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:00:02'!
ERROR!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:00:02'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:00:02'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:00:02'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:00:02'!
ERROR!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:00:05'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:00:05'!
ERROR!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:00:05'!
ERROR!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:00:05'!
ERROR!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:00:05'!
ERROR!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:00:05'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:00:05'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:00:05'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:00:05'!
ERROR!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:00:09'!
ERROR!
!Facade methodsFor: 'persistence private' stamp: 'MA 11/5/2022 20:00:41' prior: 50563253!
findCartSession: aCartId

	
	
	^cartSessionByCartId at: aCartId ifAbsent: [ self error: self class cartNotFoundErrorMessage ].! !
!Facade methodsFor: 'persistence private' stamp: 'MA 11/5/2022 20:00:45' prior: 50563458!
findCartSession: aCartId
	
	^cartSessionByCartId at: aCartId ifAbsent: [ self error: self class cartNotFoundErrorMessage ].! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:00:46'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:00:46'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:00:46'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:00:46'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:00:46'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:00:46'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:00:46'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:00:46'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:00:46'!
ERROR!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:00:46'!
ERROR!
!CartSession methodsFor: 'accessing' stamp: 'MA 11/5/2022 20:00:57'!
userId
	self shouldBeImplemented.
	^userId! !
!CartSession methodsFor: 'accessing' stamp: 'MA 11/5/2022 20:01:06' prior: 50563503!
userId

	^userId! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:01:07'!
FAILURE!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:01:16'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:01:16'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:01:16'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:01:16'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:01:16'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:01:16'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:01:16'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:01:16'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:01:16'!
FAILURE!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:01:16'!
FAILURE!

salesBookPerUser!
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 20:06:03' prior: 50563341!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cartSession creditCard salesBook cashier |
	
	cartSession := self findCartSession: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
	salesBook := salesBookPerUser at: (cartSession userId) ifAbsent: [ | newSalesBook | 
		newSalesBook := OrderedCollection new.
		salesBookPerUser at: (cartSession userId) put: newSalesBook.
		newSalesBook
	].
	
	cashier := Cashier toCheckout: cartSession cart
		     charging: creditCard 
		     throught: merchantProcessor 
		     on: clock now
		     registeringOn: salesBook.
! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 20:06:27' prior: 50563546!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cartSession creditCard salesBook cashier |
	
	cartSession := self findCartSession: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
	salesBook := salesBookPerUser at: (cartSession userId) ifAbsent: [ | newSalesBook | 
		newSalesBook := OrderedCollection new.
		salesBookPerUser at: (cartSession userId) put: newSalesBook.
		newSalesBook
	].
	
	cashier := Cashier toCheckout: cartSession cart
		     charging: creditCard 
		     throught: merchantProcessor 
		     on: clock now
		     registeringOn: salesBook.
	cashier checkout.
! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:06:28'!
ERROR!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:06:28'!
ERROR!
!Facade methodsFor: 'checkout' stamp: 'MA 11/5/2022 20:06:35' prior: 50563568!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cartSession creditCard salesBook cashier |
	
	cartSession := self findCartSession: aCartId.
	creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
	salesBook := salesBookPerUser at: (cartSession userId) ifAbsent: [ | newSalesBook | 
		newSalesBook := OrderedCollection new.
		salesBookPerUser at: (cartSession userId) put: newSalesBook.
		newSalesBook
	].
	
	cashier := Cashier toCheckout: cartSession cart
		     charging: creditCard 
		     throught: merchantProcessor 
		     on: clock now
		     registeringOn: salesBook.
	cashier checkOut.
! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:06:36'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:06:36'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:06:36'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:06:36'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:06:36'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:06:36'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:06:36'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:06:36'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:06:36'!
ERROR!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:06:36'!
ERROR!
!FacadeTest methodsFor: 'payment processor double' stamp: 'MA 11/5/2022 20:07:11'!
debit: total from: creditCard 
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'payment processor double' stamp: 'MA 11/5/2022 20:07:17' prior: 50563676!
debit: total from: creditCard 
! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:07:18'!
ERROR!
!Sale methodsFor: 'accessing' stamp: 'MA 11/5/2022 20:07:37'!
items
	self shouldBeImplemented.
	^items! !
!Sale methodsFor: 'accessing' stamp: 'MA 11/5/2022 20:07:42' prior: 50563687!
items

	^items! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:07:43'!
FAILURE!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 20:08:18' prior: 50563131!
test09CheckoutValidCartSucceed
	
	| facade cced cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	now := DateAndTime now.
	cced := Month month: now monthIndex year: now yearNumber + 1.  
	facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson'.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item with: item) equals: purchases
		 ! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:08:24'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:08:24'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:08:24'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:08:24'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:08:24'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:08:24'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:08:24'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:08:24'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:08:24'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:08:24'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:09:07'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:09:07'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:09:07'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:09:07'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:09:07'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:09:07'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:09:07'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:09:07'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:09:07'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:09:07'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 20:09:49' prior: 50562592!
defaultFacade

	^ Facade newWithValidator: self 
			withPriceList: testObjectsFactory defaultCatalog 
			withMerchantProcessor: self 
			withClock: self! !

!classDefinition: #FacadeTest category: 'TusLibros' stamp: 'MA 11/5/2022 20:16:44'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'testObjectsFactory now debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTest methodsFor: 'setup' stamp: 'MA 11/5/2022 20:16:41' prior: 50557255 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ]! !
!FacadeTest methodsFor: 'setup' stamp: 'MA 11/5/2022 20:16:46' prior: 50563799 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].! !
!FacadeTest methodsFor: 'payment processor protocol' stamp: 'MA 11/5/2022 20:17:24' prior: 50563681!
debit: total from: creditCard 

	debitBehavior value: total value: creditCard.! !
!FacadeTest methodsFor: 'payment processor protocol' stamp: 'MA 11/5/2022 20:17:49' prior: 50563813!
debit: total from: creditCard 

	^debitBehavior value: total value: creditCard.! !
!FacadeTest methodsFor: 'clock protocol' stamp: 'MA 11/5/2022 20:19:24' prior: 50562719!
now
	
	^DateAndTime now.! !

TestCase subclass: #FacadeTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FacadeTest category: 'TusLibros' stamp: 'MA 11/5/2022 20:19:31'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 20:19:41' prior: 50563698!
test09CheckoutValidCartSucceed
	
	| facade cced cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	cced := Month month: self now monthIndex year: self now yearNumber + 1.  
	facade checkoutCart: 1 withCcn: '1234567812345678' withCced: cced withCco: 'Hernan Wilkinson'.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item with: item) equals: purchases
		 ! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:19:47'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:19:47'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:19:47'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:19:47'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:19:47'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:19:47'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:19:47'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:19:47'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:19:47'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:19:47'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'MA 11/5/2022 20:22:10'!
now
	
	^ today! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 20:22:10' prior: 50562922!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory now
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 20:22:10' prior: 50562878!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory now
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 20:22:10' prior: 50562903!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory now
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 20:22:10' prior: 50562967!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory now 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 20:22:10' prior: 50562949!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory now
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 20:22:10' prior: 50562984!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory now
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !

!methodRemoval: StoreTestObjectsFactory #today stamp: 'MA 11/5/2022 20:22:10'!
today
	
	^ today!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CartTest #test09EmptyCartItemsAreEmpty stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CartTest #test10CartItemsHasTheAddedItems stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MA 11/5/2022 20:22:15'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #CartTest #test09EmptyCartItemsAreEmpty stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #CartTest #test10CartItemsHasTheAddedItems stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:22:17'!
PASSED!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'MA 11/5/2022 20:22:31'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 20:22:31' prior: 50563895!
now
	
	^ now! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 20:22:31' prior: 50557639 overrides: 16920235!
initialize

	now := DateAndTime now! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 20:22:31' prior: 50561984!
notExpiredCreditCard
	
	^CreditCard expiringOn: (Month month: now monthIndex year: now yearNumber + 1) withNumber: '1234567812345678' withOwner: 'Hernan Wilkinson'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 20:22:31' prior: 50561975!
expiredCreditCard
	
	^CreditCard expiringOn: (Month month: now monthIndex year: now yearNumber - 1) withNumber: '1234567812345678' withOwner: 'Hernan Wilkinson'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MA 11/5/2022 20:24:20'!
expiredCreditCardMonth

	^ Month month: now monthIndex year: now yearNumber - 1! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MA 11/5/2022 20:24:20' prior: 50564213!
expiredCreditCard
	
	^CreditCard expiringOn: (self expiredCreditCardMonth) withNumber: '1234567812345678' withOwner: 'Hernan Wilkinson'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MA 11/5/2022 20:24:25' prior: 50564227!
expiredCreditCard
	
	^CreditCard expiringOn: self expiredCreditCardMonth withNumber: '1234567812345678' withOwner: 'Hernan Wilkinson'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MA 11/5/2022 20:24:49'!
validCreditCardNumber

	^ '1234567812345678'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MA 11/5/2022 20:24:49' prior: 50564235!
expiredCreditCard
	
	^CreditCard expiringOn: self expiredCreditCardMonth withNumber: self validCreditCardNumber withOwner: 'Hernan Wilkinson'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MA 11/5/2022 20:24:49' prior: 50564204!
notExpiredCreditCard
	
	^CreditCard expiringOn: (Month month: now monthIndex year: now yearNumber + 1) withNumber: self validCreditCardNumber withOwner: 'Hernan Wilkinson'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MA 11/5/2022 20:25:04'!
validCreditCardOwner

	^ 'Hernan Wilkinson'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MA 11/5/2022 20:25:04' prior: 50564247!
expiredCreditCard
	
	^CreditCard expiringOn: self expiredCreditCardMonth withNumber: self validCreditCardNumber withOwner: self validCreditCardOwner! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MA 11/5/2022 20:25:04' prior: 50564255!
notExpiredCreditCard
	
	^CreditCard expiringOn: (Month month: now monthIndex year: now yearNumber + 1) withNumber: self validCreditCardNumber withOwner: self validCreditCardOwner! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MA 11/5/2022 20:25:16' prior: 50564269!
expiredCreditCard
	
	^CreditCard expiringOn: self expiredCreditCardMonth 
			     withNumber: self validCreditCardNumber 
			     withOwner: self validCreditCardOwner! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MA 11/5/2022 20:25:35' prior: 50564277!
notExpiredCreditCard
	
	^CreditCard expiringOn: (Month month: now monthIndex year: now yearNumber + 1) 
			     withNumber: self validCreditCardNumber 
			     withOwner: self validCreditCardOwner! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MA 11/5/2022 20:25:48'!
notExpiredCreditCardMonth

	^ Month month: now monthIndex year: now yearNumber + 1! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MA 11/5/2022 20:25:48' prior: 50564295!
notExpiredCreditCard
	
	^CreditCard expiringOn: (self notExpiredCreditCardMonth) 
			     withNumber: self validCreditCardNumber 
			     withOwner: self validCreditCardOwner! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MA 11/5/2022 20:25:51' prior: 50564310!
notExpiredCreditCard
	
	^CreditCard expiringOn: self notExpiredCreditCardMonth 
			     withNumber: self validCreditCardNumber 
			     withOwner: self validCreditCardOwner! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 20:27:31' prior: 50563842!
test09CheckoutValidCartSucceed
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item with: item) equals: purchases
		 ! !

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:27:50'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:27:50'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:27:50'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:27:50'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:27:50'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:27:50'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:27:50'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:27:50'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:27:50'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:27:50'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 20:29:38' prior: 50561730!
test08CheckoutNonExistentCartFails
	
	| facade cced |
	
	facade := self defaultFacade.
	cced := Month month: 2 year: 2020.  
	self should: [
		facade checkoutCart: 1 
			   withCcn: testObjectsFactory validCreditCardNumber 
			   withCced: testObjectsFactory notExpiredCreditCardMonth
			   withCco: testObjectsFactory validCreditCardOwner. ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :error | | purchases |
			self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases. 
		]
		 ! !

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:29:41'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:29:41'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:29:41'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:29:41'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:29:41'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:29:41'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:29:41'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:29:41'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:29:41'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:29:41'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 20:29:49' prior: 50564381!
test08CheckoutNonExistentCartFails
	
	| facade |
	
	facade := self defaultFacade.
	self should: [
		facade checkoutCart: 1 
			   withCcn: testObjectsFactory validCreditCardNumber 
			   withCced: testObjectsFactory notExpiredCreditCardMonth
			   withCco: testObjectsFactory validCreditCardOwner. ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :error | | purchases |
			self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases. 
		]
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 20:30:02' prior: 50564436!
test08CheckoutNonExistentCartFails
	
	self should: [
		self defaultFacade checkoutCart: 1 
			   withCcn: testObjectsFactory validCreditCardNumber 
			   withCced: testObjectsFactory notExpiredCreditCardMonth
			   withCco: testObjectsFactory validCreditCardOwner. ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :error | | purchases |
			self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			purchases := self defaultFacade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases. 
		]
		 ! !

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:30:05'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:30:05'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:30:05'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:30:05'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:30:05'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:30:05'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:30:05'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:30:05'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:30:05'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:30:05'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 20:31:04' prior: 50561440!
test07AddToNonExistentCartFails
	
	self should: [ self defaultFacade add: 1 of: testObjectsFactory itemSellByTheStore to: 1 ] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:31:06'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:31:06'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:31:06'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:31:06'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:31:06'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:31:06'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:31:06'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:31:06'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:31:06'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:31:06'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 20:31:13' prior: 50561514!
test06ListNonExistentCartFails
	
	self should: [self defaultFacade listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:31:15'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:31:15'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:31:15'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:31:15'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:31:15'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:31:15'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:31:15'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:31:15'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:31:15'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:31:15'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:32:15'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:32:15'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:32:15'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:32:15'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:32:15'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:32:15'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:32:15'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:32:15'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:32:15'!
PASSED!

!testRun: #FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:32:15'!
PASSED!
!Facade methodsFor: 'persistence private' stamp: 'MA 11/5/2022 20:39:33' prior: 50563225!
createNewCartSessionFor: anUserId

	| newCartId cartSession |
	
	newCartId := nextCartId.
	cartSession := CartSession withCart: (Cart acceptingItemsOf: priceList) forUserId: anUserId.
	cartSessionByCartId at: newCartId put: (cartSession).
	nextCartId := nextCartId + 1.
	^newCartId. ! !

!classDefinition: #Facade category: 'TusLibros' stamp: 'MA 11/5/2022 20:39:48'!
Object subclass: #Facade
	instanceVariableNames: 'credentialValidator facadeTest priceList repository cartSessionByCartId nextCartSessionId salesBookPerUser merchantProcessor clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 20:39:48' prior: 50564624!
createNewCartSessionFor: anUserId

	| newCartId cartSession |
	
	newCartId := nextCartSessionId.
	cartSession := CartSession withCart: (Cart acceptingItemsOf: priceList) forUserId: anUserId.
	cartSessionByCartId at: newCartId put: (cartSession).
	nextCartSessionId := nextCartSessionId + 1.
	^newCartId. ! !
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/5/2022 20:39:48' prior: 50563211!
initializeNewWithValidator: aCredentialValidator withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor withClock: aClock     

	credentialValidator := aCredentialValidator.
	priceList := aPriceList.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	cartSessionByCartId := Dictionary new.
	nextCartSessionId := 1.
	salesBookPerUser := Dictionary new.! !
!Facade methodsFor: 'persistence private' stamp: 'MA 11/5/2022 20:39:53' prior: 50564647!
createNewCartSessionFor: anUserId

	| newCartSessionId cartSession |
	
	newCartSessionId := nextCartSessionId.
	cartSession := CartSession withCart: (Cart acceptingItemsOf: priceList) forUserId: anUserId.
	cartSessionByCartId at: newCartSessionId put: (cartSession).
	nextCartSessionId := nextCartSessionId + 1.
	^newCartSessionId. ! !
!Facade methodsFor: 'persistence private' stamp: 'MA 11/5/2022 20:40:21' prior: 50564675!
createNewCartSessionFor: anUserId

	| newCartSessionId cartSession |
	
	newCartSessionId := nextCartSessionId.
	cartSession := CartSession withCart: (Cart acceptingItemsOf: priceList) forUserId: anUserId.
	cartSessionByCartId at: newCartSessionId put: cartSession.
	nextCartSessionId := nextCartSessionId + 1.
	^newCartSessionId. ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 20:42:55'!
test09CheckoutCartWithNotExpiredCartSucceed
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item with: item) equals: purchases
		 ! !

!methodRemoval: FacadeTest #test09CheckoutValidCartSucceed stamp: 'MA 11/5/2022 20:42:55'!
test09CheckoutValidCartSucceed
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item with: item) equals: purchases
		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 20:45:23'!
test10CheckoutCartWithExpiredCartFails
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: (OrderedCollection with: item with: item) equals: purchases
		]
	

		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 20:45:33' prior: 50564748!
test10CheckoutCartWithExpiredCartFails
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: (OrderedCollection with: item with: item) equals: purchases
		]
	

		 ! !

!testRun: #FacadeTest #test10CheckoutCartWithExpiredCartFails stamp: 'MA 11/5/2022 20:45:44'!
FAILURE!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 20:46:08' prior: 50564774!
test10CheckoutCartWithExpiredCartFails
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: (OrderedCollection with: item with: item) equals: purchases
		]
	

		 ! !

!testRun: #FacadeTest #test10CheckoutCartWithExpiredCartFails stamp: 'MA 11/5/2022 20:46:09'!
FAILURE!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/5/2022 20:46:26' prior: 50564806!
test10CheckoutCartWithExpiredCartFails
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !

!testRun: #FacadeTest #test10CheckoutCartWithExpiredCartFails stamp: 'MA 11/5/2022 20:46:28'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/5/2022 20:46:28'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/5/2022 20:46:28'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/5/2022 20:46:28'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/5/2022 20:46:28'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/5/2022 20:46:28'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/5/2022 20:46:28'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/5/2022 20:46:28'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/5/2022 20:46:28'!
PASSED!

!testRun: #FacadeTest #test09CheckoutCartWithNotExpiredCartSucceed stamp: 'MA 11/5/2022 20:46:28'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithExpiredCartFails stamp: 'MA 11/5/2022 20:46:28'!
PASSED!

----SNAPSHOT----(5 November 2022 20:48:31) CuisUniversity-5510.image priorSource: 7204830!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:18:20'!
test10CheckoutCartWithExpiredCardFails
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !

!methodRemoval: FacadeTest #test10CheckoutCartWithExpiredCartFails stamp: 'MA 11/6/2022 16:18:20'!
test10CheckoutCartWithExpiredCartFails
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:18:24'!
test09CheckoutCartWithNotExpiredCardSucceed
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item with: item) equals: purchases
		 ! !

!methodRemoval: FacadeTest #test09CheckoutCartWithNotExpiredCartSucceed stamp: 'MA 11/6/2022 16:18:24'!
test09CheckoutCartWithNotExpiredCartSucceed
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item with: item) equals: purchases
		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:19:53'!
test11CheckoutCartWithCardWithoutAmountFails
	
	| facade cartId item purchases |
	
	debitBehavior := [ :a :b | self error: Cashier creditCardHasNoCreditErrorMessage ].
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:20:02'!
test11CheckoutCartWithCardWithoutCreditFails
	
	| facade cartId item purchases |
	
	debitBehavior := [ :a :b | self error: Cashier creditCardHasNoCreditErrorMessage ].
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !

!methodRemoval: FacadeTest #test11CheckoutCartWithCardWithoutAmountFails stamp: 'MA 11/6/2022 16:20:22'!
test11CheckoutCartWithCardWithoutAmountFails
	
	| facade cartId item purchases |
	
	debitBehavior := [ :a :b | self error: Cashier creditCardHasNoCreditErrorMessage ].
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:20:28' prior: 50565038!
test11CheckoutCartWithCardWithoutCreditFails
	
	| facade cartId item purchases |
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage ].
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !

!testRun: #FacadeTest #test11CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:20:31'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:20:31'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:20:31'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:20:31'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:20:31'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/6/2022 16:20:31'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/6/2022 16:20:31'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:20:31'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:20:31'!
PASSED!

!testRun: #FacadeTest #test09CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:20:31'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:20:31'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:20:31'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:20:44' prior: 50565101!
test11CheckoutCartWithCardWithoutCreditFails
	
	| facade cartId item purchases |
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage ].
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !

!testRun: #FacadeTest #test11CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:20:45'!
FAILURE!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:20:56' prior: 50565171!
test11CheckoutCartWithCardWithoutCreditFails
	
	| facade cartId item purchases |
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage ].
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier creditCardHasNoCreditErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !

!testRun: #FacadeTest #test11CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:20:58'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:20:58'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:20:58'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:20:58'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:20:58'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/6/2022 16:20:58'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/6/2022 16:20:58'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:20:58'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:20:58'!
PASSED!

!testRun: #FacadeTest #test09CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:20:58'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:20:58'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:20:58'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:28:41'!
test05addToCartItemNotInCatalogFails
	
	| facade cartId |
	
	facade := self defaultFacade .
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	self should: [ facade add: 1 of: testObjectsFactory itemNotSellByTheStore to: cartId ]  
	      	raise: Error - MessageNotUnderstood 
	      	withExceptionDo:  [ :error |]
	
		 ! !
!CartTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:29:48' prior: 50556888!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:29:53' prior: 50556923!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 2 of: testObjectsFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!Cart class methodsFor: 'nil' stamp: 'MA 11/6/2022 16:30:15'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !

!methodRemoval: Cart #invalidItemErrorMessage stamp: 'MA 11/6/2022 16:30:29'!
invalidItemErrorMessage
	
	^'Item is not in catalog'!
!Cart methodsFor: 'assertions' stamp: 'MA 11/6/2022 16:30:38' prior: 50557281!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self class invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #CartTest #test09EmptyCartItemsAreEmpty stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #CartTest #test10CartItemsHasTheAddedItems stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #FacadeTest #test09CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:30:46'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:30:46'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:31:24' prior: 50565276!
test05addToCartItemNotInCatalogFails
	
	| facade cartId |
	
	facade := self defaultFacade .
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	self should: [ facade add: 1 of: testObjectsFactory itemNotSellByTheStore to: cartId ]  
	      	raise: Error - MessageNotUnderstood 
	      	withExceptionDo:  [ :error |
			self assert: Cart invalidItemErrorMessage equals: error messageText.
			
		]
	
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:32:01' prior: 50565422!
test05addToCartItemNotInCatalogFails
	
	| facade cartId |
	
	facade := self defaultFacade .
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	self should: [ facade add: 1 of: testObjectsFactory itemNotSellByTheStore to: cartId ]  
	      	raise: Error - MessageNotUnderstood 
	      	withExceptionDo:  [ :error |
			self assert: Cart invalidItemErrorMessage equals: error messageText.
			self assert: (OrderedCollection new) equals: (facade listCart: cartId).
		]
	
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:32:07' prior: 50565439!
test05addToCartItemNotInCatalogFails
	
	| facade cartId |
	
	facade := self defaultFacade .
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	self should: [ facade add: 1 of: testObjectsFactory itemNotSellByTheStore to: cartId ]  
	      	raise: Error - MessageNotUnderstood 
	      	withExceptionDo:  [ :error |
			self assert: Cart invalidItemErrorMessage equals: error messageText.
			self assert: OrderedCollection new equals: (facade listCart: cartId).
		]
	
		 ! !

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:32:12'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:32:12'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:32:12'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:32:12'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:32:12'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:32:12'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/6/2022 16:32:12'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/6/2022 16:32:12'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:32:12'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:32:12'!
PASSED!

!testRun: #FacadeTest #test09CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:32:12'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:32:12'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:32:12'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:35:23'!
test11ListPurchasesWithInvalidCredentialsFails
	
	| facade |

	facade := self defaultFacade.
	self should: [ facade listPurchasesForUserId: self validUser withPassword: self invalidPassword. ] 
		raise: Error - MessageNotUnderstood
		withMessage: Facade invalidCredentialsErrorMessage.
	

		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:35:32' prior: 50565518!
test11ListPurchasesWithInvalidCredentialsFails
	
	self should: [ self defaultFacade listPurchasesForUserId: self validUser withPassword: self invalidPassword. ] 
		raise: Error - MessageNotUnderstood
		withMessage: Facade invalidCredentialsErrorMessage.
	

		 ! !

!testRun: #FacadeTest #test11ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:35:35'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:35:55' prior: 50565530!
test11ListPurchasesWithInvalidCredentialsFails
	
	self should: [ self defaultFacade listPurchasesForUserId: self validUser withPassword: self invalidPassword. ] 
		raise: Error - MessageNotUnderstood
		withMessageText: Facade invalidCredentialsErrorMessage.
	

		 ! !

!testRun: #FacadeTest #test11ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:35:55'!
FAILURE!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:36:21'!
test12ListPurchasesWithInvalidCredentialsFails
	
	self should: [ self defaultFacade listPurchasesForUserId: self validUser withPassword: self invalidPassword. ] 
		raise: Error - MessageNotUnderstood
		withMessageText: Facade invalidCredentialsErrorMessage.
	

		 ! !

!methodRemoval: FacadeTest #test11ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:36:21'!
test11ListPurchasesWithInvalidCredentialsFails
	
	self should: [ self defaultFacade listPurchasesForUserId: self validUser withPassword: self invalidPassword. ] 
		raise: Error - MessageNotUnderstood
		withMessageText: Facade invalidCredentialsErrorMessage.
	

		 !
!Facade methodsFor: 'purchases' stamp: 'MA 11/6/2022 16:36:58' prior: 50563387!
listPurchasesForUserId: anUserId withPassword: aPassword 
	
	| salesBooks |

	self validateUser: anUserId password: aPassword.
	salesBooks := salesBookPerUser at: anUserId ifAbsent: [OrderedCollection new].
	^salesBooks inject: OrderedCollection new into: [ :items :salesBook | 
		items addAll: salesBook items. 
		items 
	].
	! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:36:58'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:36:58'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:36:58'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:36:58'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:36:58'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/6/2022 16:36:58'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/6/2022 16:36:58'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:36:58'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:36:58'!
PASSED!

!testRun: #FacadeTest #test09CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:36:58'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:36:58'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:36:58'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:36:58'!
PASSED!
!Facade methodsFor: 'purchases' stamp: 'MA 11/6/2022 16:37:04' prior: 50565582!
listPurchasesForUserId: anUserId withPassword: aPassword 
	
	| salesBooks |

	"self validateUser: anUserId password: aPassword."
	salesBooks := salesBookPerUser at: anUserId ifAbsent: [OrderedCollection new].
	^salesBooks inject: OrderedCollection new into: [ :items :salesBook | 
		items addAll: salesBook items. 
		items 
	].
	! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:37:04'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:37:04'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:37:04'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:37:04'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:37:04'!
PASSED!

!testRun: #FacadeTest #test05createMultipleCarts stamp: 'MA 11/6/2022 16:37:04'!
PASSED!

!testRun: #FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/6/2022 16:37:04'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:37:04'!
PASSED!

!testRun: #FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:37:04'!
PASSED!

!testRun: #FacadeTest #test09CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:37:04'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:37:04'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:37:04'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:37:04'!
FAILURE!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:37:04'!
FAILURE!
!Facade methodsFor: 'purchases' stamp: 'MA 11/6/2022 16:37:08' prior: 50565637!
listPurchasesForUserId: anUserId withPassword: aPassword 
	
	| salesBooks |

	self validateUser: anUserId password: aPassword.
	salesBooks := salesBookPerUser at: anUserId ifAbsent: [OrderedCollection new].
	^salesBooks inject: OrderedCollection new into: [ :items :salesBook | 
		items addAll: salesBook items. 
		items 
	].
	! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:38:05'!
test06createMultipleCarts
	
	| facade item firstCartId secondCartId |
	
	facade := self defaultFacade.

	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 of: item to: firstCartId. 
	
	secondCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade listCart: secondCartId).
		 ! !

!methodRemoval: FacadeTest #test05createMultipleCarts stamp: 'MA 11/6/2022 16:38:05'!
test05createMultipleCarts
	
	| facade item firstCartId secondCartId |
	
	facade := self defaultFacade.

	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 2 of: item to: firstCartId. 
	
	secondCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade listCart: secondCartId).
		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:38:12'!
test07ListNonExistentCartFails
	
	self should: [self defaultFacade listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !

!methodRemoval: FacadeTest #test06ListNonExistentCartFails stamp: 'MA 11/6/2022 16:38:12'!
test06ListNonExistentCartFails
	
	self should: [self defaultFacade listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:38:17'!
test13ListPurchasesWithInvalidCredentialsFails
	
	self should: [ self defaultFacade listPurchasesForUserId: self validUser withPassword: self invalidPassword. ] 
		raise: Error - MessageNotUnderstood
		withMessageText: Facade invalidCredentialsErrorMessage.
	

		 ! !

!methodRemoval: FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:38:17'!
test12ListPurchasesWithInvalidCredentialsFails
	
	self should: [ self defaultFacade listPurchasesForUserId: self validUser withPassword: self invalidPassword. ] 
		raise: Error - MessageNotUnderstood
		withMessageText: Facade invalidCredentialsErrorMessage.
	

		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:38:24'!
test14CheckoutCartWithCardWithoutCreditFails
	
	| facade cartId item purchases |
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage ].
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier creditCardHasNoCreditErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !

!methodRemoval: FacadeTest #test11CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:38:24'!
test11CheckoutCartWithCardWithoutCreditFails
	
	| facade cartId item purchases |
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage ].
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier creditCardHasNoCreditErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:38:45'!
test13CheckoutCartWithCardWithoutCreditFails
	
	| facade cartId item purchases |
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage ].
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier creditCardHasNoCreditErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !

!methodRemoval: FacadeTest #test14CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:38:45'!
test14CheckoutCartWithCardWithoutCreditFails
	
	| facade cartId item purchases |
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage ].
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier creditCardHasNoCreditErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:38:49'!
test12ListPurchasesWithInvalidCredentialsFails
	
	self should: [ self defaultFacade listPurchasesForUserId: self validUser withPassword: self invalidPassword. ] 
		raise: Error - MessageNotUnderstood
		withMessageText: Facade invalidCredentialsErrorMessage.
	

		 ! !

!methodRemoval: FacadeTest #test13ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:38:49'!
test13ListPurchasesWithInvalidCredentialsFails
	
	self should: [ self defaultFacade listPurchasesForUserId: self validUser withPassword: self invalidPassword. ] 
		raise: Error - MessageNotUnderstood
		withMessageText: Facade invalidCredentialsErrorMessage.
	

		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:38:53'!
test11CheckoutCartWithExpiredCardFails
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !

!methodRemoval: FacadeTest #test10CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:38:53'!
test10CheckoutCartWithExpiredCardFails
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:38:58'!
test10CheckoutCartWithNotExpiredCardSucceed
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item with: item) equals: purchases
		 ! !

!methodRemoval: FacadeTest #test09CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:38:58'!
test09CheckoutCartWithNotExpiredCardSucceed
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := facade createCartWithUser: self validUser password: self validPassword.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item with: item) equals: purchases
		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:39:02'!
test09CheckoutNonExistentCartFails
	
	self should: [
		self defaultFacade checkoutCart: 1 
			   withCcn: testObjectsFactory validCreditCardNumber 
			   withCced: testObjectsFactory notExpiredCreditCardMonth
			   withCco: testObjectsFactory validCreditCardOwner. ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :error | | purchases |
			self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			purchases := self defaultFacade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases. 
		]
		 ! !

!methodRemoval: FacadeTest #test08CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:39:02'!
test08CheckoutNonExistentCartFails
	
	self should: [
		self defaultFacade checkoutCart: 1 
			   withCcn: testObjectsFactory validCreditCardNumber 
			   withCced: testObjectsFactory notExpiredCreditCardMonth
			   withCco: testObjectsFactory validCreditCardOwner. ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :error | | purchases |
			self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			purchases := self defaultFacade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases. 
		]
		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:39:26'!
test08ListNonExistentCartFails
	
	self should: [self defaultFacade listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !

!methodRemoval: FacadeTest #test07ListNonExistentCartFails stamp: 'MA 11/6/2022 16:39:26'!
test07ListNonExistentCartFails
	
	self should: [self defaultFacade listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 !

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:39:29'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:39:31'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:39:31'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:39:31'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:39:31'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:39:31'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:39:31'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:39:31'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:39:31'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:39:31'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:39:31'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:39:31'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:39:31'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:39:31'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:42:44'!
createCartIn: facade

	^ facade createCartWithUser: self validUser password: self validPassword! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:42:44' prior: 50561467!
test02createCartCreatesAnEmptyCart
	
	| facade cartId |
	
	facade := self defaultFacade .
	cartId := self createCartIn: facade.
	self assert: OrderedCollection new equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:42:44' prior: 50561451!
test04addToCartMultipleTimesReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := self defaultFacade .
	cartId := self createCartIn: facade.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 1 of: item to: cartId. 
	facade add: 1 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:42:44' prior: 50565458!
test05addToCartItemNotInCatalogFails
	
	| facade cartId |
	
	facade := self defaultFacade .
	cartId := self createCartIn: facade.
	self should: [ facade add: 1 of: testObjectsFactory itemNotSellByTheStore to: cartId ]  
	      	raise: Error - MessageNotUnderstood 
	      	withExceptionDo:  [ :error |
			self assert: Cart invalidItemErrorMessage equals: error messageText.
			self assert: OrderedCollection new equals: (facade listCart: cartId).
		]
	
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:42:44' prior: 50565998!
test10CheckoutCartWithNotExpiredCardSucceed
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := self createCartIn: facade.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item with: item) equals: purchases
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:42:44' prior: 50565709!
test06createMultipleCarts
	
	| facade item firstCartId secondCartId |
	
	facade := self defaultFacade.

	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := self createCartIn: facade.
	facade add: 2 of: item to: firstCartId. 
	
	secondCartId := facade createCartWithUser: self validUser password: self validPassword.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade listCart: secondCartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:42:44' prior: 50566217!
test06createMultipleCarts
	
	| facade item firstCartId secondCartId |
	
	facade := self defaultFacade.

	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := self createCartIn: facade.
	facade add: 2 of: item to: firstCartId. 
	
	secondCartId := self createCartIn: facade.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade listCart: secondCartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:42:44' prior: 50565855!
test13CheckoutCartWithCardWithoutCreditFails
	
	| facade cartId item purchases |
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage ].
	facade := self defaultFacade.
	cartId := self createCartIn: facade.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier creditCardHasNoCreditErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:42:44' prior: 50561500!
test03addToCartReturnsTheAddedItems
	
	| facade cartId item |
	
	facade := self defaultFacade .
	cartId := self createCartIn: facade.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:42:44' prior: 50565941!
test11CheckoutCartWithExpiredCardFails
	
	| facade cartId item purchases |
	
	facade := self defaultFacade.
	cartId := self createCartIn: facade.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:44:17' prior: 50561524!
test01cannotCreateCartWithInvalidCredentials

	self should: [false createCartWithUser: self validUser password: self invalidPassword] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorMessage
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/4/2022 20:40:59' prior: 50566327!
test01cannotCreateCartWithInvalidCredentials

	| facade |

	facade := self defaultFacade .
	self should: [facade createCartWithUser: self validUser password: self invalidPassword] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorMessage
		 ! !

!classDefinition: #FacadeTest category: 'TusLibros' stamp: 'MA 11/6/2022 16:45:51'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'testObjectsFactory debitBehavior facade2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTest methodsFor: 'setup' stamp: 'MA 11/6/2022 16:45:50' prior: 50563806 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	facade2 := Facade newWithValidator: self 
					withPriceList: testObjectsFactory defaultCatalog 
					withMerchantProcessor: self 
					withClock: self.! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:46:02' prior: 50566337!
test01cannotCreateCartWithInvalidCredentials

	self should: [facade2 createCartWithUser: self validUser password: self invalidPassword] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorMessage
		 ! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:46:03'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:46:03'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:46:03'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:46:03'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:46:03'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:46:03'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:46:03'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:46:03'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:46:03'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:46:03'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:46:03'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:46:03'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:46:03'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:46:03'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:46:17' prior: 50566155!
test02createCartCreatesAnEmptyCart
	
	| cartId |
	
	cartId := self createCartIn: facade2.
	self assert: OrderedCollection new equals: (facade2 listCart: cartId).
		 ! !

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:46:17'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:46:17'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:46:17'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:46:17'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:46:17'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:46:17'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:46:18'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:46:18'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:46:18'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:46:18'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:46:18'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:46:18'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:46:18'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:46:18'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:46:32' prior: 50566287!
test03addToCartReturnsTheAddedItems
	
	| cartId item |
	
	cartId := self createCartIn: facade2.
	item := testObjectsFactory itemSellByTheStore.
	facade2 add: 2 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade2 listCart: cartId).
		 ! !

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:46:35'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:46:35'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:46:35'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:46:35'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:46:35'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:46:35'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:46:35'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:46:35'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:46:35'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:46:35'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:46:35'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:46:35'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:46:35'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:46:35'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:46:47' prior: 50566164!
test04addToCartMultipleTimesReturnsTheAddedItems
	
	| cartId item |
	
	cartId := self createCartIn: facade2.
	item := testObjectsFactory itemSellByTheStore.
	facade2 add: 1 of: item to: cartId. 
	facade2 add: 1 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade2 listCart: cartId).
		 ! !

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:46:49'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:46:49'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:46:49'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:46:49'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:46:49'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:46:49'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:46:49'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:46:49'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:46:49'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:46:49'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:46:49'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:46:49'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:46:49'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:46:49'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:47:01' prior: 50566178!
test05addToCartItemNotInCatalogFails
	
	| cartId |
	
	cartId := self createCartIn: facade2.
	self should: [ facade2 add: 1 of: testObjectsFactory itemNotSellByTheStore to: cartId ]  
	      	raise: Error - MessageNotUnderstood 
	      	withExceptionDo:  [ :error |
			self assert: Cart invalidItemErrorMessage equals: error messageText.
			self assert: OrderedCollection new equals: (facade2 listCart: cartId).
		]
	
		 ! !

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:47:03'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:47:03'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:47:03'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:47:03'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:47:03'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:47:03'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:47:03'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:47:03'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:47:03'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:47:03'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:47:03'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:47:03'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:47:03'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:47:03'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:47:16' prior: 50566238!
test06createMultipleCarts
	
	| facade item firstCartId secondCartId |

	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := self createCartIn: facade.
	facade2 add: 2 of: item to: firstCartId. 
	
	secondCartId := self createCartIn: facade.
	facade2 add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade2 listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade2 listCart: secondCartId).
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:47:24' prior: 50566654!
test06createMultipleCarts
	
	| item firstCartId secondCartId |

	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := self createCartIn: facade2.
	facade2 add: 2 of: item to: firstCartId. 
	
	secondCartId := self createCartIn: facade2.
	facade2 add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade2 listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade2 listCart: secondCartId).
		 ! !

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:47:27'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:47:27'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:47:27'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:47:27'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:47:27'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:47:27'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:47:27'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:47:27'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:47:27'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:47:27'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:47:27'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:47:27'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:47:27'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:47:27'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:47:38' prior: 50564512!
test07AddToNonExistentCartFails
	
	self should: [ facade2 add: 1 of: testObjectsFactory itemSellByTheStore to: 1 ] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:47:39'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:47:39'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:47:39'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:47:39'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:47:39'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:47:39'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:47:39'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:47:39'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:47:39'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:47:39'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:47:39'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:47:39'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:47:39'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:47:39'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:47:47' prior: 50566087!
test08ListNonExistentCartFails
	
	self should: [facade2 listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:47:47'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:47:47'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:47:47'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:47:47'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:47:47'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:47:47'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:47:47'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:47:47'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:47:47'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:47:47'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:47:47'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:47:47'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:47:47'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:47:47'!
PASSED!

!methodRemoval: FacadeTest #defaultFacade stamp: 'MA 11/6/2022 16:48:14'!
defaultFacade

	^ Facade newWithValidator: self 
			withPriceList: testObjectsFactory defaultCatalog 
			withMerchantProcessor: self 
			withClock: self!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:48:30' prior: 50566044!
test09CheckoutNonExistentCartFails
	
	self should: [
		facade2 checkoutCart: 1 
			   withCcn: testObjectsFactory validCreditCardNumber 
			   withCced: testObjectsFactory notExpiredCreditCardMonth
			   withCco: testObjectsFactory validCreditCardOwner. ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :error | | purchases |
			self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			purchases := facade2 listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases. 
		]
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:48:47' prior: 50566195!
test10CheckoutCartWithNotExpiredCardSucceed
	
	| cartId item purchases |
	
	cartId := self createCartIn: facade2.
	item := testObjectsFactory itemSellByTheStore.
	facade2 add: 2 of: item to: cartId.
	facade2 checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner.
	purchases := facade2 listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item with: item) equals: purchases
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:49:07' prior: 50566300!
test11CheckoutCartWithExpiredCardFails
	
	| cartId item purchases |
	
	cartId := self createCartIn: facade2.
	item := testObjectsFactory itemSellByTheStore.
	facade2 add: 2 of: item to: cartId.
	self should: [
		facade2 checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			purchases := facade2 listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:49:09'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:49:09'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:49:09'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:49:09'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:49:09'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:49:09'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:49:09'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:49:09'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:49:09'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:49:09'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:49:09'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:49:09'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:49:09'!
ERROR!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:49:09'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:49:16' prior: 50565918!
test12ListPurchasesWithInvalidCredentialsFails
	
	self should: [ facade2 listPurchasesForUserId: self validUser withPassword: self invalidPassword. ] 
		raise: Error - MessageNotUnderstood
		withMessageText: Facade invalidCredentialsErrorMessage.
	

		 ! !

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:49:17'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:49:17'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:49:17'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:49:17'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:49:17'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:49:17'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:49:17'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:49:17'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:49:17'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:49:17'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:49:17'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:49:17'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:49:17'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:49:17'!
ERROR!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:49:17'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:49:32' prior: 50566257!
test13CheckoutCartWithCardWithoutCreditFails
	
	| cartId item purchases |
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage ].
	cartId := self createCartIn: facade2.
	item := testObjectsFactory itemSellByTheStore.
	facade2 add: 2 of: item to: cartId.
	self should: [
		facade2 checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier creditCardHasNoCreditErrorMessage equals: error messageText.
			purchases := facade2 listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:49:35'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:49:35'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:49:35'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:49:35'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:49:35'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:49:35'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:49:35'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:49:35'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:49:35'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:49:35'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:49:35'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:49:35'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:49:35'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:49:35'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:49:56'!
createCartIn

	^ facade2 createCartWithUser: self validUser password: self validPassword! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:49:57'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:49:57'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:49:57'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:49:57'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:49:57'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:49:57'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:49:57'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:49:57'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:49:57'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:49:57'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:49:57'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:49:57'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:49:57'!
PASSED!

!methodRemoval: FacadeTest #createCartIn stamp: 'MA 11/6/2022 16:50:06'!
createCartIn

	^ facade2 createCartWithUser: self validUser password: self validPassword!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:50:39' prior: 50566149!
createCartIn: facade

	^ facade2 createCartWithUser: self validUser password: self validPassword! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:50:49'!
createCartIn

	^ facade2 createCartWithUser: self validUser password: self validPassword! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:50:49' prior: 50566870!
test10CheckoutCartWithNotExpiredCardSucceed
	
	| cartId item purchases |
	
	cartId := self createCartIn.
	item := testObjectsFactory itemSellByTheStore.
	facade2 add: 2 of: item to: cartId.
	facade2 checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner.
	purchases := facade2 listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item with: item) equals: purchases
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:50:49' prior: 50566534!
test04addToCartMultipleTimesReturnsTheAddedItems
	
	| cartId item |
	
	cartId := self createCartIn.
	item := testObjectsFactory itemSellByTheStore.
	facade2 add: 1 of: item to: cartId. 
	facade2 add: 1 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade2 listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:50:49' prior: 50566477!
test03addToCartReturnsTheAddedItems
	
	| cartId item |
	
	cartId := self createCartIn.
	item := testObjectsFactory itemSellByTheStore.
	facade2 add: 2 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade2 listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:50:49' prior: 50566424!
test02createCartCreatesAnEmptyCart
	
	| cartId |
	
	cartId := self createCartIn.
	self assert: OrderedCollection new equals: (facade2 listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:50:49' prior: 50566891!
test11CheckoutCartWithExpiredCardFails
	
	| cartId item purchases |
	
	cartId := self createCartIn.
	item := testObjectsFactory itemSellByTheStore.
	facade2 add: 2 of: item to: cartId.
	self should: [
		facade2 checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			purchases := facade2 listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:50:49' prior: 50566593!
test05addToCartItemNotInCatalogFails
	
	| cartId |
	
	cartId := self createCartIn.
	self should: [ facade2 add: 1 of: testObjectsFactory itemNotSellByTheStore to: cartId ]  
	      	raise: Error - MessageNotUnderstood 
	      	withExceptionDo:  [ :error |
			self assert: Cart invalidItemErrorMessage equals: error messageText.
			self assert: OrderedCollection new equals: (facade2 listCart: cartId).
		]
	
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:50:49' prior: 50567021!
test13CheckoutCartWithCardWithoutCreditFails
	
	| cartId item purchases |
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage ].
	cartId := self createCartIn.
	item := testObjectsFactory itemSellByTheStore.
	facade2 add: 2 of: item to: cartId.
	self should: [
		facade2 checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier creditCardHasNoCreditErrorMessage equals: error messageText.
			purchases := facade2 listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:50:49' prior: 50566672!
test06createMultipleCarts
	
	| item firstCartId secondCartId |

	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := self createCartIn.
	facade2 add: 2 of: item to: firstCartId. 
	
	secondCartId := self createCartIn.
	facade2 add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade2 listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade2 listCart: secondCartId).
		 ! !

!methodRemoval: FacadeTest #createCartIn: stamp: 'MA 11/6/2022 16:50:49'!
createCartIn: facade

	^ facade2 createCartWithUser: self validUser password: self validPassword!

!classDefinition: #FacadeTest category: 'TusLibros' stamp: 'MA 11/6/2022 16:51:15'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'testObjectsFactory debitBehavior facade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:51:15' prior: 50567215!
test11CheckoutCartWithExpiredCardFails
	
	| cartId item purchases |
	
	cartId := self createCartIn.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:51:15' prior: 50567154!
createCartIn

	^ facade createCartWithUser: self validUser password: self validPassword! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:51:15' prior: 50566789!
test08ListNonExistentCartFails
	
	self should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:51:15' prior: 50567195!
test03addToCartReturnsTheAddedItems
	
	| cartId item |
	
	cartId := self createCartIn.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:51:15' prior: 50566962!
test12ListPurchasesWithInvalidCredentialsFails
	
	self should: [ facade listPurchasesForUserId: self validUser withPassword: self invalidPassword. ] 
		raise: Error - MessageNotUnderstood
		withMessageText: Facade invalidCredentialsErrorMessage.
	

		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:51:15' prior: 50566849!
test09CheckoutNonExistentCartFails
	
	self should: [
		facade checkoutCart: 1 
			   withCcn: testObjectsFactory validCreditCardNumber 
			   withCced: testObjectsFactory notExpiredCreditCardMonth
			   withCco: testObjectsFactory validCreditCardOwner. ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :error | | purchases |
			self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases. 
		]
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:51:15' prior: 50567257!
test13CheckoutCartWithCardWithoutCreditFails
	
	| cartId item purchases |
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage ].
	cartId := self createCartIn.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier creditCardHasNoCreditErrorMessage equals: error messageText.
			purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:51:15' prior: 50566357 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	facade := Facade newWithValidator: self 
					withPriceList: testObjectsFactory defaultCatalog 
					withMerchantProcessor: self 
					withClock: self.! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:51:15' prior: 50567207!
test02createCartCreatesAnEmptyCart
	
	| cartId |
	
	cartId := self createCartIn.
	self assert: OrderedCollection new equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:51:15' prior: 50567241!
test05addToCartItemNotInCatalogFails
	
	| cartId |
	
	cartId := self createCartIn.
	self should: [ facade add: 1 of: testObjectsFactory itemNotSellByTheStore to: cartId ]  
	      	raise: Error - MessageNotUnderstood 
	      	withExceptionDo:  [ :error |
			self assert: Cart invalidItemErrorMessage equals: error messageText.
			self assert: OrderedCollection new equals: (facade listCart: cartId).
		]
	
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:51:15' prior: 50566735!
test07AddToNonExistentCartFails
	
	self should: [ facade add: 1 of: testObjectsFactory itemSellByTheStore to: 1 ] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:51:15' prior: 50567181!
test04addToCartMultipleTimesReturnsTheAddedItems
	
	| cartId item |
	
	cartId := self createCartIn.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 1 of: item to: cartId. 
	facade add: 1 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:51:15' prior: 50567160!
test10CheckoutCartWithNotExpiredCardSucceed
	
	| cartId item purchases |
	
	cartId := self createCartIn.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner.
	purchases := facade listPurchasesForUserId: self validUser withPassword: self validPassword.
	self assert: (OrderedCollection with: item with: item) equals: purchases
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:51:15' prior: 50566368!
test01cannotCreateCartWithInvalidCredentials

	self should: [facade createCartWithUser: self validUser password: self invalidPassword] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorMessage
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 16:51:15' prior: 50567286!
test06createMultipleCarts
	
	| item firstCartId secondCartId |

	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := self createCartIn.
	facade add: 2 of: item to: firstCartId. 
	
	secondCartId := self createCartIn.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade listCart: secondCartId).
		 ! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:51:19'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:51:19'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:51:19'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:51:19'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:51:19'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:51:19'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:51:19'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:51:19'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:51:19'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:51:19'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:51:19'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:51:19'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:51:19'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:52:32'!
listPurchases

	^ facade listPurchasesForUserId: self validUser withPassword: self validPassword! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:52:32' prior: 50567403!
test13CheckoutCartWithCardWithoutCreditFails
	
	| cartId item purchases |
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage ].
	cartId := self createCartIn.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier creditCardHasNoCreditErrorMessage equals: error messageText.
			purchases := self listPurchases.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:52:32' prior: 50567492!
test10CheckoutCartWithNotExpiredCardSucceed
	
	| cartId item purchases |
	
	cartId := self createCartIn.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner.
	purchases := self listPurchases.
	self assert: (OrderedCollection with: item with: item) equals: purchases
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:52:32' prior: 50567317!
test11CheckoutCartWithExpiredCardFails
	
	| cartId item purchases |
	
	cartId := self createCartIn.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			purchases := self listPurchases.
			self assert: OrderedCollection new equals: purchases
		]
	

		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:52:32' prior: 50567381!
test09CheckoutNonExistentCartFails
	
	self should: [
		facade checkoutCart: 1 
			   withCcn: testObjectsFactory validCreditCardNumber 
			   withCced: testObjectsFactory notExpiredCreditCardMonth
			   withCco: testObjectsFactory validCreditCardOwner. ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :error | | purchases |
			self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			purchases := self listPurchases.
			self assert: OrderedCollection new equals: purchases. 
		]
		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:52:42' prior: 50567589!
test13CheckoutCartWithCardWithoutCreditFails
	
	| cartId item |
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage ].
	cartId := self createCartIn.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier creditCardHasNoCreditErrorMessage equals: error messageText.
			self assert: OrderedCollection new equals: self listPurchases
		]
	

		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:52:56' prior: 50567635!
test11CheckoutCartWithExpiredCardFails
	
	| cartId item |
	
	cartId := self createCartIn.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			self assert: OrderedCollection new equals: self listPurchases
		]
	

		 ! !

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:53:00'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:53:00'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:53:00'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:53:00'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:53:00'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:53:00'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:53:00'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:53:00'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:53:00'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:53:00'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:53:00'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:53:00'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:53:00'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:53:00'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:53:15' prior: 50567616!
test10CheckoutCartWithNotExpiredCardSucceed
	
	| cartId item |
	
	cartId := self createCartIn.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner.
	self assert: (OrderedCollection with: item with: item) equals: self listPurchases
		 ! !

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:53:18'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:53:18'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:53:18'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:53:18'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:53:18'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:53:18'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:53:18'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:53:18'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:53:18'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:53:18'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:53:18'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:53:18'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:53:18'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:53:18'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 16:53:26' prior: 50567659!
test09CheckoutNonExistentCartFails
	
	self should: [
		facade checkoutCart: 1 
			   withCcn: testObjectsFactory validCreditCardNumber 
			   withCced: testObjectsFactory notExpiredCreditCardMonth
			   withCco: testObjectsFactory validCreditCardOwner. ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :error | self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			self assert: OrderedCollection new equals: self listPurchases. 
		]
		 ! !

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:53:28'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 16:53:28'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 16:53:28'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 16:53:28'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 16:53:28'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 16:53:28'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 16:53:28'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 16:53:28'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 16:53:28'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 16:53:28'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 16:53:28'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 16:53:28'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 16:53:28'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 16:53:28'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 17:39:50'!
test14CannotAddToExpiredCart
	
	| cartId |
	
	cartId := self createCartIn.
	self should: [ facade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId ] 
		raise: Error - MessageNotUnderstood
		withMessageText: Facade expiredCartErrorMessage.
	

		 ! !

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 17:39:57'!
ERROR!
!Facade class methodsFor: 'error messages' stamp: 'MA 11/6/2022 17:40:03'!
expiredCartErrorMessage
	self shouldBeImplemented.! !
!Facade class methodsFor: 'error messages' stamp: 'MA 11/6/2022 17:40:13' prior: 50567910!
expiredCartErrorMessage
	
	^'Expired cart'! !

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 17:40:14'!
FAILURE!
!Facade methodsFor: 'add' stamp: 'MA 11/6/2022 17:41:06' prior: 50563295!
add: aQuantity of: anItem to: aCartId

	| cartSession |
	cartSession := self findCartSession: aCartId.
	(cartSession) cart add: aQuantity of: anItem.! !
!Facade methodsFor: 'add' stamp: 'MA 11/6/2022 17:41:46' prior: 50567922!
add: aQuantity of: anItem to: aCartId

	| cartSession |

	cartSession := self findCartSession: aCartId.
	cartSession isExpired ifTrue: [ self error: self class expiredCartErrorMessage ].
	cartSession cart add: aQuantity of: anItem.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 17:41:49'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 17:41:49'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 17:41:49'!
ERROR!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 17:41:49'!
ERROR!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 17:41:49'!
ERROR!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 17:41:49'!
ERROR!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 17:41:49'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 17:41:49'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 17:41:49'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 17:41:49'!
ERROR!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 17:41:49'!
ERROR!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 17:41:49'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 17:41:49'!
ERROR!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 17:41:49'!
ERROR!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 17:41:54'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 17:41:54'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 17:41:54'!
ERROR!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 17:41:54'!
ERROR!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 17:41:54'!
ERROR!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 17:41:54'!
ERROR!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 17:41:54'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 17:41:54'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 17:41:54'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 17:41:54'!
ERROR!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 17:41:54'!
ERROR!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 17:41:54'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 17:41:54'!
ERROR!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 17:41:54'!
ERROR!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 17:41:57'!
ERROR!
!CartSession methodsFor: 'testing' stamp: 'MA 11/6/2022 17:42:18'!
isExpired
	self shouldBeImplemented.! !
!CartSession methodsFor: 'testing' stamp: 'MA 11/6/2022 17:53:07' prior: 50568031!
isExpired
	true.! !
!CartSession methodsFor: 'testing' stamp: 'MA 11/6/2022 17:53:10' prior: 50568035!
isExpired
	
	^true.! !

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 17:53:12'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 17:53:15'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 17:53:15'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 17:53:15'!
ERROR!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 17:53:15'!
ERROR!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 17:53:15'!
FAILURE!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 17:53:15'!
ERROR!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 17:53:15'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 17:53:15'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 17:53:15'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 17:53:15'!
ERROR!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 17:53:15'!
ERROR!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 17:53:15'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 17:53:15'!
ERROR!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 17:53:15'!
PASSED!

!classDefinition: #FacadeTest category: 'TusLibros' stamp: 'MA 11/6/2022 17:54:45'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'testObjectsFactory debitBehavior facade now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTest methodsFor: 'setup' stamp: 'MA 11/6/2022 17:54:44' prior: 50567433 overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	now := testObjectsFactory now.
	facade := Facade newWithValidator: self 
					withPriceList: testObjectsFactory defaultCatalog 
					withMerchantProcessor: self 
					withClock: self.! !
!FacadeTest methodsFor: 'clock protocol' stamp: 'MA 11/6/2022 17:54:55' prior: 50563825!
now
	
	now.! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 17:57:13' prior: 50567896!
test14CannotAddToExpiredCart
	
	| cartId |
	
	cartId := self createCartIn.
	now := now + 31 minutes.
	self should: [ facade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId ] 
		raise: Error - MessageNotUnderstood
		withMessageText: Facade expiredCartErrorMessage.
	

		 ! !
!Facade methodsFor: 'persistence private' stamp: 'MA 11/6/2022 18:01:52' prior: 50564689!
createNewCartSessionFor: anUserId

	| newCartSessionId cartSession |
	
	newCartSessionId := nextCartSessionId.
	cartSession := CartSession withCart: (Cart acceptingItemsOf: priceList) forUserId: anUserId withClock: clock.
	cartSessionByCartId at: newCartSessionId put: cartSession.
	nextCartSessionId := nextCartSessionId + 1.
	^newCartSessionId. ! !
!Facade methodsFor: 'persistence private' stamp: 'MA 11/6/2022 18:02:08' prior: 50568127!
createNewCartSessionFor: anUserId

	| newCartSessionId cartSession |
	
	newCartSessionId := nextCartSessionId.
	cartSession := CartSession withCart: (Cart acceptingItemsOf: priceList) forUserId: anUserId.
	cartSessionByCartId at: newCartSessionId put: cartSession.
	nextCartSessionId := nextCartSessionId + 1.
	^newCartSessionId. ! !
!CartSession methodsFor: 'nil' stamp: 'MA 11/6/2022 19:06:58'!
withCartDo: aClosure

	aClosure value: cart.! !

!methodRemoval: Facade class #expiredCartErrorMessage stamp: 'MA 11/6/2022 19:08:29'!
expiredCartErrorMessage
	
	^'Expired cart'!
!CartSession class methodsFor: 'nil' stamp: 'MA 11/6/2022 19:08:38'!
expiredCartErrorMessage
	
	^'Expired cart'! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 19:08:59' prior: 50568115!
test14CannotAddToExpiredCart
	
	| cartId |
	
	cartId := self createCartIn.
	now := now + 31 minutes.
	self should: [ facade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 ! !
!Facade methodsFor: 'add' stamp: 'MA 11/6/2022 19:09:24' prior: 50567930!
add: aQuantity of: anItem to: aCartId

	| cartSession |

	cartSession := self findCartSession: aCartId.
	cartSession cart add: aQuantity of: anItem.! !
!CartSession methodsFor: 'actions' stamp: 'MA 11/6/2022 19:09:47' prior: 50568154!
withCartDo: aClosure

	self isExpired ifTrue: [ self error: self class expiredCartErrorMessage ].
	aClosure value: cart.! !
!CartSession class methodsFor: 'instance creation' stamp: 'MA 11/6/2022 19:15:04'!
withCart: aCart forUserId: anUserId withClock: aClock  

	^self new initializeWithCart: aCart forUserId: anUserId ! !
!Facade methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 19:15:04' prior: 50568141!
createNewCartSessionFor: anUserId

	| newCartSessionId cartSession |
	
	newCartSessionId := nextCartSessionId.
	cartSession := CartSession withCart: (Cart acceptingItemsOf: priceList) forUserId: anUserId withClock: clock.
	cartSessionByCartId at: newCartSessionId put: cartSession.
	nextCartSessionId := nextCartSessionId + 1.
	^newCartSessionId. ! !

!methodRemoval: CartSession class #withCart:forUserId: stamp: 'MA 11/6/2022 19:15:04'!
withCart: aCart forUserId: anUserId 

	^self new initializeWithCart: aCart forUserId: anUserId !
!CartSession class methodsFor: 'instance creation' stamp: 'MA 11/6/2022 19:15:29' prior: 50568193!
withCart: aCart forUserId: anUserId withClock: aClock  

	^self new initializeWithCart: aCart forUserId: anUserId! !
!CartSession methodsFor: 'initialization' stamp: 'MA 11/6/2022 19:15:52'!
initializeWithCart: aCart forUserId: anUserId withClock: aClock  

	cart := aCart.
	userId := anUserId.! !
!CartSession class methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 19:15:52' prior: 50568220!
withCart: aCart forUserId: anUserId withClock: aClock  

	^self new initializeWithCart: aCart forUserId: anUserId withClock: aClock! !

!methodRemoval: CartSession #initializeWithCart:forUserId: stamp: 'MA 11/6/2022 19:15:52'!
initializeWithCart: aCart forUserId: anUserId 

	cart := aCart.
	userId := anUserId.!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'MA 11/6/2022 19:16:06'!
Object subclass: #CartSession
	instanceVariableNames: 'cart userId clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'initialization' stamp: 'MA 11/6/2022 19:16:04' prior: 50568226!
initializeWithCart: aCart forUserId: anUserId withClock: aClock  

	cart := aCart.
	userId := anUserId.
	clock := aClock.! !

!classDefinition: #CartSession category: 'TusLibros' stamp: 'MA 11/6/2022 19:27:19'!
Object subclass: #CartSession
	instanceVariableNames: 'cart userId clock lastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'initialization' stamp: 'MA 11/6/2022 19:27:17' prior: 50568253!
initializeWithCart: aCart forUserId: anUserId withClock: aClock  

	cart := aCart.
	userId := anUserId.
	clock := aClock.
	lastUsed := aClock now.! !

!methodRemoval: CartSession #isExpired stamp: 'MA 11/6/2022 19:27:32'!
isExpired
	
	^true.!

DateAndTime now between: DateAndTime now - 1 and: DateAndTime now + 1!

DateAndTime now between: (DateAndTime now - 1) and: (DateAndTime now + 1)!

(DateAndTime now) between: (DateAndTime now - 1) and: (DateAndTime now + 1)!
!CartSession methodsFor: 'actions' stamp: 'MA 11/6/2022 19:30:38' prior: 50568186!
withCartDo: aClosure

	(clock now between: lastUsed and: lastUsed + 30 minutes) ifTrue: [ self error: self class expiredCartErrorMessage ].
	aClosure value: cart.! !
!Facade methodsFor: 'add' stamp: 'MA 11/6/2022 19:31:13' prior: 50568178!
add: aQuantity of: anItem to: aCartId

	| cartSession |

	cartSession := self findCartSession: aCartId.
	cartSession withCartDo: [ :cart | cart add: aQuantity of: anItem.]! !
!Facade methodsFor: 'add' stamp: 'MA 11/6/2022 19:31:16' prior: 50568294!
add: aQuantity of: anItem to: aCartId

	| cartSession |

	cartSession := self findCartSession: aCartId.
	cartSession withCartDo: [ :cart | cart add: aQuantity of: anItem ]! !
!Facade methodsFor: 'add' stamp: 'MA 11/6/2022 19:31:40' prior: 50568302!
add: aQuantity of: anItem to: aCartId

	(self findCartSession: aCartId) withCartDo: [ :cart | cart add: aQuantity of: anItem ]! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 19:31:45'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 19:31:45'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 19:31:45'!
ERROR!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 19:31:45'!
ERROR!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 19:31:45'!
ERROR!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 19:31:45'!
ERROR!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 19:31:45'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 19:31:45'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 19:31:45'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 19:31:45'!
ERROR!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 19:31:45'!
ERROR!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 19:31:45'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 19:31:45'!
ERROR!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 19:31:45'!
ERROR!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 19:31:52'!
ERROR!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 19:31:52'!
ERROR!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 19:32:12'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 19:32:12'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 19:32:12'!
ERROR!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 19:32:12'!
ERROR!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 19:32:12'!
ERROR!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 19:32:12'!
ERROR!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 19:32:12'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 19:32:12'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 19:32:12'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 19:32:12'!
ERROR!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 19:32:12'!
ERROR!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 19:32:12'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 19:32:12'!
ERROR!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 19:32:12'!
ERROR!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 19:32:15'!
ERROR!
!FacadeTest methodsFor: 'clock protocol' stamp: 'MA 11/6/2022 19:32:39' prior: 50568112!
now
	
	^now.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 19:32:40'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 19:32:40'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 19:32:40'!
ERROR!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 19:32:40'!
ERROR!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 19:32:40'!
FAILURE!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 19:32:40'!
ERROR!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 19:32:40'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 19:32:40'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 19:32:40'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 19:32:40'!
ERROR!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 19:32:40'!
ERROR!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 19:32:40'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 19:32:40'!
ERROR!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 19:32:40'!
FAILURE!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 19:32:43'!
FAILURE!

clock now!

clock now!

lastUsed!
!CartSession methodsFor: 'actions' stamp: 'MA 11/6/2022 19:33:54' prior: 50568286!
withCartDo: aClosure

	(clock now between: lastUsed and: lastUsed + 30 minutes) ifFalse: [ self error: self class expiredCartErrorMessage ].
	aClosure value: cart.! !

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 19:33:55'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 19:33:57'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 19:33:57'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 19:33:57'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 19:33:57'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 19:33:57'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 19:33:57'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 19:33:57'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 19:33:57'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 19:33:57'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 19:33:57'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 19:33:57'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 19:33:57'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 19:33:57'!
PASSED!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 19:33:57'!
PASSED!
!FacadeTest methodsFor: 'actions' stamp: 'MA 11/6/2022 19:36:59'!
createCart

	^ facade createCartWithUser: self validUser password: self validPassword! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 19:36:59' prior: 50567771!
test10CheckoutCartWithNotExpiredCardSucceed
	
	| cartId item |
	
	cartId := self createCart.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner.
	self assert: (OrderedCollection with: item with: item) equals: self listPurchases
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 19:36:59' prior: 50567358!
test03addToCartReturnsTheAddedItems
	
	| cartId item |
	
	cartId := self createCart.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 19:36:59' prior: 50567479!
test04addToCartMultipleTimesReturnsTheAddedItems
	
	| cartId item |
	
	cartId := self createCart.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 1 of: item to: cartId. 
	facade add: 1 of: item to: cartId. 
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 19:36:59' prior: 50567524!
test06createMultipleCarts
	
	| item firstCartId secondCartId |

	item := testObjectsFactory itemSellByTheStore.
	
	firstCartId := self createCart.
	facade add: 2 of: item to: firstCartId. 
	
	secondCartId := self createCart.
	facade add: 1 of: item to: secondCartId. 
	
	self assert: (OrderedCollection with: item with: item) equals: (facade listCart: firstCartId).
	self assert: (OrderedCollection with: item) equals: (facade listCart: secondCartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 19:36:59' prior: 50567453!
test05addToCartItemNotInCatalogFails
	
	| cartId |
	
	cartId := self createCart.
	self should: [ facade add: 1 of: testObjectsFactory itemNotSellByTheStore to: cartId ]  
	      	raise: Error - MessageNotUnderstood 
	      	withExceptionDo:  [ :error |
			self assert: Cart invalidItemErrorMessage equals: error messageText.
			self assert: OrderedCollection new equals: (facade listCart: cartId).
		]
	
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 19:36:59' prior: 50567678!
test13CheckoutCartWithCardWithoutCreditFails
	
	| cartId item |
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage ].
	cartId := self createCart.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier creditCardHasNoCreditErrorMessage equals: error messageText.
			self assert: OrderedCollection new equals: self listPurchases
		]
	

		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 19:36:59' prior: 50567445!
test02createCartCreatesAnEmptyCart
	
	| cartId |
	
	cartId := self createCart.
	self assert: OrderedCollection new equals: (facade listCart: cartId).
		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 19:36:59' prior: 50568166!
test14CannotAddToExpiredCart
	
	| cartId |
	
	cartId := self createCart.
	now := now + 31 minutes.
	self should: [ facade add: 1 of: testObjectsFactory itemSellByTheStore to: cartId ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 ! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'MA 11/6/2022 19:36:59' prior: 50567704!
test11CheckoutCartWithExpiredCardFails
	
	| cartId item |
	
	cartId := self createCart.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [
		facade checkoutCart: 1 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory expiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage equals: error messageText.
			self assert: OrderedCollection new equals: self listPurchases
		]
	

		 ! !

!methodRemoval: FacadeTest #createCartIn stamp: 'MA 11/6/2022 19:36:59'!
createCartIn

	^ facade createCartWithUser: self validUser password: self validPassword!
!CartSession methodsFor: 'actions' stamp: 'MA 11/6/2022 19:37:58'!
sessionIsExpired

	^ clock now between: lastUsed and: lastUsed + 30 minutes! !
!CartSession methodsFor: 'actions' stamp: 'MA 11/6/2022 19:37:58' prior: 50568467!
withCartDo: aClosure

	(self sessionIsExpired) ifFalse: [ self error: self class expiredCartErrorMessage ].
	aClosure value: cart.! !
!CartSession methodsFor: 'actions' stamp: 'MA 11/6/2022 19:38:21' prior: 50568678!
sessionIsExpired

	^ (clock now between: lastUsed and: lastUsed + 30 minutes) not ! !
!CartSession methodsFor: 'actions' stamp: 'MA 11/6/2022 19:38:33' prior: 50568684!
withCartDo: aClosure

	self sessionIsExpired ifTrue: [ self error: self class expiredCartErrorMessage ].
	aClosure value: cart.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 19:39:34'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 19:39:34'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 19:39:34'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 19:39:34'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 19:39:34'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 19:39:34'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 19:39:34'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 19:39:34'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 19:39:34'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 19:39:34'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 19:39:34'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 19:39:34'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 19:39:34'!
PASSED!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 19:39:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MA 11/6/2022 19:39:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MA 11/6/2022 19:39:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MA 11/6/2022 19:39:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MA 11/6/2022 19:39:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MA 11/6/2022 19:39:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MA 11/6/2022 19:39:54'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 19:41:01'!
test15CannotListExpiredCart
	
	| cartId |
	
	cartId := self createCart.
	now := now + 31 minutes.
	self should: [ facade listCart: cartId ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 ! !

!testRun: #FacadeTest #test15CannotListExpiredCart stamp: 'MA 11/6/2022 19:41:03'!
FAILURE!
!Facade methodsFor: 'list' stamp: 'MA 11/6/2022 19:42:54' prior: 50563301!
listCart: cartId 
	
	^(self findCartSession: cartId) withCartDo: [ :cart | cart items ].! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 19:42:59'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 19:42:59'!
FAILURE!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 19:42:59'!
FAILURE!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 19:42:59'!
FAILURE!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 19:42:59'!
FAILURE!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 19:42:59'!
FAILURE!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 19:42:59'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 19:42:59'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 19:42:59'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 19:42:59'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 19:42:59'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 19:42:59'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 19:42:59'!
PASSED!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 19:42:59'!
PASSED!

!testRun: #FacadeTest #test15CannotListExpiredCart stamp: 'MA 11/6/2022 19:42:59'!
PASSED!
!CartSession methodsFor: 'actions' stamp: 'MA 11/6/2022 19:43:10' prior: 50568697!
withCartDo: aClosure

	self sessionIsExpired ifTrue: [ self error: self class expiredCartErrorMessage ].
	^aClosure value: cart.! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 19:43:10'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 19:43:10'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 19:43:10'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 19:43:10'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 19:43:10'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 19:43:10'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 19:43:10'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 19:43:10'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 19:43:10'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 19:43:10'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 19:43:10'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 19:43:10'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 19:43:10'!
PASSED!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 19:43:10'!
PASSED!

!testRun: #FacadeTest #test15CannotListExpiredCart stamp: 'MA 11/6/2022 19:43:10'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 19:44:04'!
test15CannotCheckoutExpiredCart
	
	| cartId |
	
	cartId := self createCart.
	now := now + 31 minutes.
	self should: [ facade listCart: cartId ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 19:44:23'!
test16CannotListExpiredCart
	
	| cartId |
	
	cartId := self createCart.
	now := now + 31 minutes.
	self should: [ facade listCart: cartId ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 ! !

!methodRemoval: FacadeTest #test15CannotListExpiredCart stamp: 'MA 11/6/2022 19:44:23'!
test15CannotListExpiredCart
	
	| cartId |
	
	cartId := self createCart.
	now := now + 31 minutes.
	self should: [ facade listCart: cartId ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 19:46:33' prior: 50568899!
test16CannotListExpiredCart
	
	| cartId |
	
	cartId := self createCart.
	now := now + 31 minutes.
	facade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	self should: [
		facade checkoutCart: cartId 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 ! !

!testRun: #FacadeTest #test16CannotListExpiredCart stamp: 'MA 11/6/2022 19:46:38'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 19:46:47' prior: 50568920!
test16CannotListExpiredCart
	
	| cartId |
	
	cartId := self createCart.
	facade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
		now := now + 31 minutes.
	self should: [
		facade checkoutCart: cartId 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 19:46:49' prior: 50568941!
test16CannotListExpiredCart
	
	| cartId |
	
	cartId := self createCart.
	facade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	now := now + 31 minutes.
	self should: [
		facade checkoutCart: cartId 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 ! !

!testRun: #FacadeTest #test16CannotListExpiredCart stamp: 'MA 11/6/2022 19:46:50'!
FAILURE!
!Facade methodsFor: 'checkout' stamp: 'MA 11/6/2022 19:50:55' prior: 50563622!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cartSession creditCard salesBook cashier |
	
	cartSession := self findCartSession: aCartId.
	
	cartSession withCartDo: [ :cart | 
		creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
		salesBook := salesBookPerUser at: (cartSession userId) ifAbsent: [ | newSalesBook | 
			newSalesBook := OrderedCollection new.
			salesBookPerUser at: (cartSession userId) put: newSalesBook.
			newSalesBook
		].
	
		cashier := Cashier toCheckout: cart
			     charging: creditCard 
			     throught: merchantProcessor 
			     on: clock now
			     registeringOn: salesBook.
		cashier checkOut.
	]
! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 19:50:58'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 19:50:58'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 19:50:58'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 19:50:58'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 19:50:58'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 19:50:58'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 19:50:58'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 19:50:58'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 19:50:58'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 19:50:58'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 19:50:58'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 19:50:58'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 19:50:58'!
PASSED!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 19:50:58'!
PASSED!

!testRun: #FacadeTest #test15CannotCheckoutExpiredCart stamp: 'MA 11/6/2022 19:50:58'!
PASSED!

!testRun: #FacadeTest #test16CannotListExpiredCart stamp: 'MA 11/6/2022 19:50:58'!
PASSED!
!Facade methodsFor: 'checkout' stamp: 'MA 11/6/2022 19:51:08' prior: 50568980!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard salesBook cashier |
	
	(self findCartSession: aCartId) withCartDo: [ :cart | 
		creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
		salesBook := salesBookPerUser at: ((self findCartSession: aCartId) userId) ifAbsent: [ | newSalesBook | 
			newSalesBook := OrderedCollection new.
			salesBookPerUser at: ((self findCartSession: aCartId) userId) put: newSalesBook.
			newSalesBook
		].
	
		cashier := Cashier toCheckout: cart
			     charging: creditCard 
			     throught: merchantProcessor 
			     on: clock now
			     registeringOn: salesBook.
		cashier checkOut.
	]
! !
!Facade methodsFor: 'checkout' stamp: 'MA 11/6/2022 19:52:03' prior: 50569055!
checkoutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard salesBook cashier |
	
	(self findCartSession: aCartId) withCartDo: [ :cart | 
		creditCard := CreditCard expiringOn: aCced withNumber: aCcn withOwner: aCco.
		salesBook := salesBookPerUser at: ((self findCartSession: aCartId) userId) ifAbsent: [ | newSalesBook | 
			newSalesBook := OrderedCollection new.
			salesBookPerUser at: ((self findCartSession: aCartId) userId) put: newSalesBook.
			newSalesBook
		].
	
		cashier := Cashier toCheckout: cart
						     charging: creditCard 
						     throught: merchantProcessor 
						     on: clock now
						     registeringOn: salesBook.
		cashier checkOut.
	]
! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 19:52:04'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 19:52:04'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 19:52:04'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 19:52:04'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 19:52:04'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 19:52:04'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 19:52:04'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 19:52:04'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 19:52:04'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 19:52:04'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 19:52:04'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 19:52:04'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 19:52:04'!
PASSED!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 19:52:04'!
PASSED!

!testRun: #FacadeTest #test15CannotCheckoutExpiredCart stamp: 'MA 11/6/2022 19:52:04'!
PASSED!

!testRun: #FacadeTest #test16CannotListExpiredCart stamp: 'MA 11/6/2022 19:52:04'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 19:55:02'!
test17aCartCanBeListedIfAnActionWasMadeInTheLast30Minutes
	
	| cartId |
	
	cartId := self createCart.
	facade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	now := now + 31 minutes.
	self should: [
		facade checkoutCart: cartId 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 19:55:44'!
test16CannotCheckoutExpiredCart
	
	| cartId |
	
	cartId := self createCart.
	facade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	now := now + 31 minutes.
	self should: [
		facade checkoutCart: cartId 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 ! !

!methodRemoval: FacadeTest #test16CannotListExpiredCart stamp: 'MA 11/6/2022 19:55:44'!
test16CannotListExpiredCart
	
	| cartId |
	
	cartId := self createCart.
	facade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	now := now + 31 minutes.
	self should: [
		facade checkoutCart: cartId 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 19:55:51'!
test15CannotListExpiredCart
	
	| cartId |
	
	cartId := self createCart.
	now := now + 31 minutes.
	self should: [ facade listCart: cartId ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 ! !

!methodRemoval: FacadeTest #test15CannotCheckoutExpiredCart stamp: 'MA 11/6/2022 19:55:51'!
test15CannotCheckoutExpiredCart
	
	| cartId |
	
	cartId := self createCart.
	now := now + 31 minutes.
	self should: [ facade listCart: cartId ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 19:56:05'!
test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes
	
	| cartId |
	
	cartId := self createCart.
	facade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	now := now + 31 minutes.
	self should: [
		facade checkoutCart: cartId 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 ! !

!methodRemoval: FacadeTest #test17aCartCanBeListedIfAnActionWasMadeInTheLast30Minutes stamp: 'MA 11/6/2022 19:56:05'!
test17aCartCanBeListedIfAnActionWasMadeInTheLast30Minutes
	
	| cartId |
	
	cartId := self createCart.
	facade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	now := now + 31 minutes.
	self should: [
		facade checkoutCart: cartId 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 19:57:25' prior: 50569230!
test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes
	
	| cartId |
	
	cartId := self createCart.
	now := now + 29 minutes.
	facade listCart: cartId.
	now := now + 2 minutes.
	self shouldntFail: [ facade listCart: cartId ].
	

		 ! !

!testRun: #FacadeTest #test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes stamp: 'MA 11/6/2022 19:57:27'!
ERROR!

!testRun: #FacadeTest #test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes stamp: 'MA 11/6/2022 19:57:27'!
FAILURE!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 19:57:58' prior: 50569269!
test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes
	
	| cartId |
	
	cartId := self createCart.
	now := now + 29 minutes.
	facade listCart: cartId.
	now := now + 2 minutes.
	self should: [ facade listCart: cartId ] raise: CartSession expiredCartErrorMessage
	

		 ! !

!testRun: #FacadeTest #test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes stamp: 'MA 11/6/2022 19:57:58'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 19:58:10' prior: 50569287!
test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes
	
	| cartId |
	
	cartId := self createCart.
	now := now + 29 minutes.
	facade listCart: cartId.
	now := now + 2 minutes.
	self shouldnt: [ facade listCart: cartId ] raise: CartSession expiredCartErrorMessage
	

		 ! !

!testRun: #FacadeTest #test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes stamp: 'MA 11/6/2022 19:58:11'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 20:00:35' prior: 50569302!
test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes
	
	| cartId |
	
	cartId := self createCart.
	now := now + 29 minutes.
	facade listCart: cartId.
	now := now + 2 minutes.
	self shouldnt: [ facade listCart: cartId ] raise: Error
	

		 ! !

!testRun: #FacadeTest #test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes stamp: 'MA 11/6/2022 20:00:36'!
FAILURE!
!CartSession methodsFor: 'actions' stamp: 'MA 11/6/2022 20:01:21' prior: 50568835!
withCartDo: aClosure

	self sessionIsExpired ifTrue: [ self error: self class expiredCartErrorMessage ].
	lastUsed := clock now.
	^aClosure value: cart.
	! !

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!testRun: #FacadeTest #test15CannotListExpiredCart stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!testRun: #FacadeTest #test16CannotCheckoutExpiredCart stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!testRun: #FacadeTest #test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes stamp: 'MA 11/6/2022 20:01:22'!
PASSED!

!methodRemoval: CartSession #cart stamp: 'MA 11/6/2022 20:04:44'!
cart

	^cart!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #CartTest #test09EmptyCartItemsAreEmpty stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #CartTest #test10CartItemsHasTheAddedItems stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test15CannotListExpiredCart stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test16CannotCheckoutExpiredCart stamp: 'MA 11/6/2022 20:04:50'!
PASSED!

!testRun: #FacadeTest #test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes stamp: 'MA 11/6/2022 20:04:50'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 20:06:03'!
checkoutCart: cartId

	^ facade checkoutCart: cartId 
		   withCcn: testObjectsFactory validCreditCardNumber 
		   withCced: testObjectsFactory notExpiredCreditCardMonth
		   withCco: testObjectsFactory validCreditCardOwner! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 20:06:03' prior: 50569173!
test16CannotCheckoutExpiredCart
	
	| cartId |
	
	cartId := self createCart.
	facade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	now := now + 31 minutes.
	self should: [
		self checkoutCart: cartId ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 ! !
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 20:06:10' prior: 50569510!
test16CannotCheckoutExpiredCart
	
	| cartId |
	
	cartId := self createCart.
	facade add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	now := now + 31 minutes.
	self should: [ self checkoutCart: cartId ] 
		raise: Error - MessageNotUnderstood
		withMessageText: CartSession expiredCartErrorMessage.
	

		 ! !

!testRun: #FacadeTest #test16CannotCheckoutExpiredCart stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test15CannotListExpiredCart stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test16CannotCheckoutExpiredCart stamp: 'MA 11/6/2022 20:06:11'!
PASSED!

!testRun: #FacadeTest #test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes stamp: 'MA 11/6/2022 20:06:11'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 20:06:27' prior: 50568605!
test13CheckoutCartWithCardWithoutCreditFails
	
	| cartId item |
	
	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage ].
	cartId := self createCart.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self should: [ self checkoutCart: cartId ] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :error |
			self assert: Cashier creditCardHasNoCreditErrorMessage equals: error messageText.
			self assert: OrderedCollection new equals: self listPurchases
		]
	

		 ! !

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 20:06:28'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 20:06:29'!
PASSED!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 20:06:29'!
PASSED!

!testRun: #FacadeTest #test15CannotListExpiredCart stamp: 'MA 11/6/2022 20:06:29'!
PASSED!

!testRun: #FacadeTest #test16CannotCheckoutExpiredCart stamp: 'MA 11/6/2022 20:06:29'!
PASSED!

!testRun: #FacadeTest #test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes stamp: 'MA 11/6/2022 20:06:29'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 20:06:53' prior: 50568528!
test10CheckoutCartWithNotExpiredCardSucceed
	
	| cartId item |
	
	cartId := self createCart.
	item := testObjectsFactory itemSellByTheStore.
	facade add: 2 of: item to: cartId.
	self checkoutCart: cartId.
	self assert: (OrderedCollection with: item with: item) equals: self listPurchases
		 ! !

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test15CannotListExpiredCart stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test16CannotCheckoutExpiredCart stamp: 'MA 11/6/2022 20:06:54'!
PASSED!

!testRun: #FacadeTest #test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes stamp: 'MA 11/6/2022 20:06:54'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 20:07:29' prior: 50567834!
test09CheckoutNonExistentCartFails
	
	self should: [ self checkoutCart: 1 ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :error | self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			self assert: OrderedCollection new equals: self listPurchases. 
		]
		 ! !

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test15CannotListExpiredCart stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test16CannotCheckoutExpiredCart stamp: 'MA 11/6/2022 20:07:31'!
PASSED!

!testRun: #FacadeTest #test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes stamp: 'MA 11/6/2022 20:07:31'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 20:07:37' prior: 50569741!
test09CheckoutNonExistentCartFails
	
	self should: [ self checkoutCart: 1 ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :error | 
			self assert: Facade cartNotFoundErrorMessage equals: error messageText.
			self assert: OrderedCollection new equals: self listPurchases. 
		]
		 ! !

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test15CannotListExpiredCart stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test16CannotCheckoutExpiredCart stamp: 'MA 11/6/2022 20:07:39'!
PASSED!

!testRun: #FacadeTest #test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes stamp: 'MA 11/6/2022 20:07:39'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'MA 11/6/2022 20:07:46' prior: 50567349!
test08ListNonExistentCartFails
	
	self should: [ facade listCart: 1 ] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Facade cartNotFoundErrorMessage.
		 ! !

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test15CannotListExpiredCart stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test16CannotCheckoutExpiredCart stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes stamp: 'MA 11/6/2022 20:07:47'!
PASSED!

!testRun: #FacadeTest #test01cannotCreateCartWithInvalidCredentials stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

!testRun: #FacadeTest #test02createCartCreatesAnEmptyCart stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

!testRun: #FacadeTest #test03addToCartReturnsTheAddedItems stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

!testRun: #FacadeTest #test04addToCartMultipleTimesReturnsTheAddedItems stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

!testRun: #FacadeTest #test05addToCartItemNotInCatalogFails stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

!testRun: #FacadeTest #test06createMultipleCarts stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

!testRun: #FacadeTest #test07AddToNonExistentCartFails stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

!testRun: #FacadeTest #test08ListNonExistentCartFails stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

!testRun: #FacadeTest #test09CheckoutNonExistentCartFails stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

!testRun: #FacadeTest #test10CheckoutCartWithNotExpiredCardSucceed stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

!testRun: #FacadeTest #test11CheckoutCartWithExpiredCardFails stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

!testRun: #FacadeTest #test12ListPurchasesWithInvalidCredentialsFails stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

!testRun: #FacadeTest #test13CheckoutCartWithCardWithoutCreditFails stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

!testRun: #FacadeTest #test14CannotAddToExpiredCart stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

!testRun: #FacadeTest #test15CannotListExpiredCart stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

!testRun: #FacadeTest #test16CannotCheckoutExpiredCart stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

!testRun: #FacadeTest #test17aCartCanBeUseIfAnActionWasMadeInTheLast30Minutes stamp: 'MA 11/6/2022 20:09:26'!
PASSED!

----QUIT----(6 November 2022 20:09:58) CuisUniversity-5510.image priorSource: 7464010!